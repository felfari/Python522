Index: main6.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># name = \"admin\"\r\n# print(\"Hello\", name)\r\n# age = 20.2\r\n# print(age)\r\n#\r\n# print(type(name))\r\n# print(type(age))\r\n#\r\n# print(id(name))\r\n# print(id(age))\r\n\r\n# a = b = c = 10\r\n# a, b, c = 5, \"Hello\", 7.2\r\n# print(a)\r\n# print(b)\r\n# print(c)\r\n\r\n# name = \"admin\"\r\n# print(name)\r\n\r\n# import keyword\r\n# print(keyword.kwlist)\r\n\r\n# PI = 3.14\r\n# print(PI)\r\n\r\n# a = 5\r\n# print(a)\r\n# a = \"Hello\"\r\n# print(a)\r\n# a = 1.2\r\n# print(a)\r\n\r\n# a = 5\r\n# b = 20\r\n# print(\"a:\", a)\r\n# print(\"b:\", b)\r\n#\r\n# # c = a  # 1\r\n# # a = b  # 2\r\n# # b = c  # 1\r\n#\r\n# print(\"a:\", a)\r\n# print(\"b:\", b)\r\n\r\n# print(\"строка \"\r\n#       \"символов\")\r\n# print('\\tстрока \\nсимв      олов')\r\n\r\n# a = 5\r\n# b = 20\r\n# print(\"a:\", a)\r\n# print(\"b:\", b)\r\n#\r\n# # a = a + b  # 3\r\n# # b = a - b  # 1\r\n# # a = a - b  # 2\r\n#\r\n# a, b = b, a\r\n#\r\n# print(\"a:\", a)\r\n# print(\"b:\", b)\r\n\r\n# print(\"Документ \\\"file.txt\\\" находится по пути: \\rD:\\\\\\\\folder\\\\file.txt\")\r\n\r\n# s1 = \"Hello\"\r\n# s2 = \"Python\"\r\n# s3 = s1 + \", \" + s2 + \"!\\t\\t\"  # конкатенация\r\n# print(s3)\r\n# s4 = s3 * 5\r\n# print(s4)\r\n\r\n# print(6 + 2)\r\n# print(6.2 + 2.4)\r\n# print(6 - 2)\r\n# print(6 * 2)\r\n# print(7 / 2)\r\n# print(6 / 2)\r\n#\r\n# print(7 // 2)\r\n# print(6 // 2)\r\n#\r\n# print(6 ** 2)\r\n#\r\n# print(7 % 2)\r\n\r\n# a = 5\r\n# b = 7\r\n# c = 3\r\n# d = a + b + c\r\n# print(d)\r\n# f = a * b * c\r\n# print(f)\r\n# g = d / 3\r\n# print(g)\r\n\r\n# number = (6 + 4) * (5 ** 2 + 7)\r\n# print(number)\r\n\r\n# a = 5\r\n#\r\n# a += 3  # a = a + 3\r\n# print(a)  # 8\r\n#\r\n# a -= 3  # a = a - 3\r\n# print(a)  # 5\r\n#\r\n# a *= 4  # a = a * 4\r\n# print(a)  # 20\r\n\r\n# num = 9753  # 4\r\n# print(\"Исходное число:\", num)\r\n# a = num % 10\r\n# print(\"a:\", a)\r\n# num = num // 10\r\n# # print(num)\r\n# b = num % 10\r\n# print(\"b:\", b)\r\n# num = num // 10\r\n# # print(num)\r\n# c = num % 10\r\n# print(\"c:\", c)\r\n# num = num // 10\r\n# # print(num)\r\n# d = num % 10\r\n# print(\"d:\", d)\r\n# print(\"Обратное число:\", a * 1000 + b * 100 + c * 10 + d)\r\n\r\n\r\n# num = 4321  #\r\n# print(\"Исходное число:\", num)\r\n# res = num % 10 * 1000  # 1000\r\n# num //= 10\r\n# res += num % 10 * 100  # 200    res = res + num % 10 * 100\r\n# num //= 10\r\n# res += num % 10 * 10\r\n# num //= 10\r\n# res += num % 10\r\n# print(\"Обратное число:\", res)\r\n\r\n# num1 = \"2\"\r\n# num2 = 3\r\n# res = int(num1) + num2\r\n# # res = num1 + str(num2)\r\n# print(res)\r\n\r\n# print(int(3.981))\r\n# print(type(round(3.581)))\r\n# print(type(round(3.589, 2)))\r\n\r\n# num1 = \"2.5\"\r\n# num2 = 10\r\n# res = float(num1) + num2  # 2.5 + 10\r\n# print(res)\r\n\r\n# name = \"Виктор\"\r\n# age = 20\r\n# print(\"Меня зовут\", name, \". Мне\", age, \"лет.\")\r\n# print(\"Меня зовут \" + name + \". Мне \" + str(age) + \" лет.\")\r\n# print(\"Меня зовут \", name, \". Мне \", age, \" лет.\", end=\" \", sep=\"\")\r\n# print(\"Hello Python\")\r\n\r\n# name = input(\"Введите имя: \")\r\n# print(\"Hello,\", name)\r\n\r\n\r\n# num = int(input(\"Введите число: \"))\r\n# power = int(input(\"Введите степень: \"))  # power = 2\r\n# # num = int(num)\r\n# # power = int(power)\r\n# res = num ** power  # 5 ** 2\r\n# print(\"Число\", num, \"в степени\", power, \"равно:\", res)\r\n\r\n# num1 = int(input(\"Введите число 1: \"))\r\n# num2 = int(input(\"Введите число 2: \"))\r\n# num3 = int(input(\"Введите число 3: \"))\r\n# num4 = int(input(\"Введите число 4: \"))\r\n# sum_1 = num1 + num2\r\n# sum_2 = num3 + num4\r\n# res = sum_1 / sum_2\r\n# print(round(res, 2))\r\n\r\n# b1 = True\r\n# b2 = False\r\n# # print(b1)\r\n# # print(b2)\r\n# # print(type(b1))\r\n# # print(type(b2))\r\n#\r\n# # print(5 == 5)\r\n# # print(5 == 3)\r\n# print(int(b1))  # 1\r\n# print(int(b2))  # 0\r\n# print(b1 + 5)  # 1 + 5 = 6\r\n# print(b2 + 5)  # 0 + 5 = 5\r\n\r\n# print(bool(\"Python\"))\r\n# print(bool(\"\"))\r\n# print(bool(\" \"))\r\n# print(bool(-5))\r\n# print(bool(0))\r\n# print(bool(0.2))\r\n# print(bool(0.0))\r\n# print(bool(True))\r\n# print(bool(False))\r\n# print(bool(None))\r\n\r\n\r\n# test = None\r\n# print(test)\r\n# print(type(test))\r\n# test = 5\r\n# print(test)\r\n\r\n# print(5 == 5)\r\n# print(5 == 3)\r\n# print(2 + 5 == 3 + 4)  # 7 == 7\r\n# print(2 + 5 != 3 + 4)  # 7 != 7\r\n# print(8 > 5)\r\n# print(8 >= 8)\r\n# print(5 < 10)\r\n# print(5 <= 5)\r\n# print(\"hello\" > \"Hello\")  # 104 > 72\r\n\r\n# print(2 < 4 < 9)  # True : True => True\r\n# print(2 > 4 < 9)  # False : True => False\r\n#\r\n# print(2 * 5 > 7 >= 4 + 3)  # 10 > 7 >= 7  True : True => True\r\n# print(3 * 3 <= 7 >= 2)  # 9 <= 7 >= 2  False : True => False\r\n\r\n\r\n# n = int(input(\"Введите пятизначное число: \"))  # 12345\r\n# a = n % 10\r\n# n //= 10\r\n# b = n % 10\r\n# n //= 10\r\n# c = n % 10\r\n# n //= 10\r\n# d = n % 10\r\n# n //= 10\r\n# e = n % 10\r\n# print(\"Произведение:\", a * b * c * d * e)\r\n# print(\"Среднее арифметическое:\", (a + b + c + d + e) / 5)\r\n\r\n# print(5 - 3 == 2 and 1 + 3 == 4)  # True and True  => True\r\n# print(5 - 3 == 2 and 1 + 3 < 4)  # True and False  => False\r\n# print(5 - 3 > 2 and 1 + 3 == 4)  # False and True  => False\r\n# print(5 - 3 > 2 and 1 + 3 < 4)  # False and False  => False\r\n\r\n# print(5 - 3 == 2 or 1 + 3 == 4)  # True and True  => True\r\n# print(5 - 3 == 2 or 1 + 3 < 4)  # True and False  => True\r\n# print(5 - 3 > 2 or 1 + 3 == 4)  # False and True  => True\r\n# print(5 - 3 > 2 or 1 + 3 < 4)  # False and False  => False\r\n\r\n# print(not 9 - 5)  # not True  => False\r\n# print(not 7 - 7)  # not False => True\r\n\r\n# a = 10\r\n# b = 10\r\n# if a > b:\r\n#     print(a, \">\", b)\r\n# if b > a:\r\n#     print(b, \">\", a)\r\n# if b == a:\r\n#     print(b, \"==\", a)\r\n\r\n# cnt = 5\r\n# if cnt < 10:\r\n#     cnt = cnt + 1\r\n# else:\r\n#     cnt = cnt - 1\r\n# print(cnt)\r\n\r\n# a = 40\r\n# b = 50\r\n# if a > b:\r\n#     print(a, \">\", b)\r\n# elif b == a:\r\n#     print(b, \"==\", a)\r\n# else:\r\n#     print(b, \">\", a)\r\n\r\n# age = int(input(\"Введите свой возраст: \"))\r\n# if age >= 18:\r\n#     print(\"Доступ на сайт разрешен\")\r\n#     print(\"Приятного просмотра\")\r\n# else:\r\n#     print(\"Доступ запрещен\")\r\n\r\n# a = input(\"Введите первую строну: \")\r\n# b = input(\"Введите вторую строну: \")\r\n# c = input(\"Введите третью строну: \")\r\n#\r\n# if a == b == c:  # '10' == '10' == '10'\r\n#     print(\"Треугольник равносторонний\")\r\n# elif a == b or a == c or b == c:\r\n#     print(\"Треугольник равнобедренный\")\r\n# else:\r\n#     print(\"Треугольник разносторонний\")\r\n\r\n# day = int(input(\"Введите день недели (цифрой): \"))\r\n# if 1 <= day <= 5:  # (day >= 1) and (day <= 5)\r\n#     print(\"Рабочий день - \", end=\"\")\r\n#     if day == 1:\r\n#         print(\"понедельник\")\r\n#     if day == 2:\r\n#         print(\"вторник\")\r\n#     if day == 3:\r\n#         print(\"среда\")\r\n#     if day == 4:\r\n#         print(\"четверг\")\r\n#     if day == 5:\r\n#         print(\"пятница\")\r\n# elif day == 6 or day == 7:\r\n#     print(\"Выходной день - \", end=\"\")\r\n#     if day == 6:\r\n#         print(\"суббота\")\r\n#     if day == 7:\r\n#         print(\"воскресенье\")\r\n# else:\r\n#     print(\"Такого дня недели не существует\")\r\n\r\n# month = int(input('Введите номер месяца:'))\r\n# if (month == 12) or 1 <= month <= 2:\r\n#     print('Зима')\r\n# if 3 <= month <= 5:\r\n#     print('Весна')\r\n# if 6 <= month <= 8:\r\n#     print('Лето')\r\n# if 9 <= month <= 11:\r\n#     print('Осень')\r\n\r\n\r\n# day = int(input('Ввведите номер месяца (цифрой): '))\r\n# if 1 <= day <= 12:  # (day >= 1) and (day <= 5):\r\n#     print('Время года - ', end='')\r\n#     if day == 1 or day == 2 or day == 12:\r\n#         print('Зима')\r\n#     if 3 <= day <= 5:  # day == 4 or day == 5 or day == 3\r\n#         print('Весна')\r\n#     if day == 6 or day == 7 or day == 8:\r\n#         print('Лето')\r\n#     if day == 9 or day == 10 or day == 11:\r\n#         print('Осень')\r\n# else:\r\n#     print('Такого времени года не существует')\r\n\r\n# day = int(input('Ввведите номер месяца (цифрой): '))\r\n#\r\n# if day == 1 or day == 2 or day == 12:\r\n#     print('Зима')\r\n# elif 3 <= day <= 5:  # day == 4 or day == 5 or day == 3\r\n#     print('Весна')\r\n# elif day == 6 or day == 7 or day == 8:\r\n#     print('Лето')\r\n# elif day == 9 or day == 10 or day == 11:\r\n#     print('Осень')\r\n# else:\r\n#     print('Такого времени года не существует')\r\n\r\n# n = int(input(\"Введите количество ворон: \"))\r\n# if 0 <= n <= 9:\r\n#     print(\"На ветке\", end=\" \")\r\n#     if n == 1:\r\n#         print(n, \"ворона\")\r\n#     if 2 <= n <= 4:\r\n#         print(n, \"вороны\")\r\n#     if 5 <= n <= 9 or n == 0:\r\n#         print(n, \"ворон\")\r\n# else:\r\n#     print(\"Ошибка ввода данных\")\r\n\r\n# n = int(input(\"Введите количество ворон: \"))\r\n# if 0 <= n <= 9:\r\n#     print(\"На ветке\", end=\" \")\r\n#     if n == 1:\r\n#         print(n, \"ворона\")\r\n#     elif 2 <= n <= 4:\r\n#         print(n, \"вороны\")\r\n#     else:\r\n#         print(n, \"ворон\")\r\n# else:\r\n#     print(\"Ошибка ввода данных\")\r\n\r\n\r\n# match выражение:\r\n#     case шаблон_1:\r\n#         действие_1\r\n#     case шаблон_2:\r\n#         действие_2\r\n#     case _:\r\n#        действие по умолчанию\r\n\r\n# password = \"qwerty\"\r\n#\r\n# match password:\r\n#     case 'admin':\r\n#         print(\"Администратор\")\r\n#     case 'user':\r\n#         print(\"Пользователь\")\r\n#     case _:\r\n#         print(\"Пароль не верен\")\r\n\r\n# day = 'вторник'\r\n# time = 13\r\n#\r\n# match day:\r\n#     case 'понедельник' | 'вторник' | 'среда' | 'четверг' | 'пятница' if 9 <= time <= 12 or 14 <= time <= 17:\r\n#         print(\"Рабочий день\")\r\n#     case 'суббота' | 'воскресенье':\r\n#         print(\"Выходной день\")\r\n#     case _:\r\n#         print(\"Такого дня недели не существует или не рабочее время\")\r\n\r\n# a, b = 30, 20\r\n#\r\n# print(a if a < b else b)\r\n\r\n\r\n# a, b = 20, 20\r\n# print(\"a == b\" if a == b else \"a > b\" if a > b else \"b > a\")\r\n\r\n# a = int(input(\"Введите число от 1 до 99: \"))  # 45\r\n# kop = a  # 45\r\n# if 11 <= kop <= 14:\r\n#     print(a, \"копеек\")\r\n# elif 1 <= a <= 99:\r\n#     kop = kop % 10\r\n#     if kop == 1:\r\n#         print(a, \"копейка\")\r\n#     elif 2 <= kop <= 4:\r\n#         print(a, \"копейки\")\r\n#     else:\r\n#         print(a, \"копеек\")\r\n# else:\r\n#     print(\"Недопустимое значение\")\r\n\r\n# try:  # попытаться\r\n#     n = int(input(\"Введите целое число: \"))\r\n#     print(n * 2)\r\n# except ValueError:\r\n#     print(\"Что-то пошло не так\")\r\n\r\n# try:\r\n#     n = int(input(\"Введите делимое: \"))\r\n#     m = int(input(\"Введите делитель: \"))\r\n#     print(n / m)\r\n# except ValueError:\r\n#     print(\"Нельзя вводить строки\")\r\n# except ZeroDivisionError:\r\n#     print(\"Нельзя делить на ноль\")\r\n\r\n# try:\r\n#     n = int(input(\"Введите делимое: \"))\r\n#     m = int(input(\"Введите делитель: \"))\r\n#     print(n / m)\r\n# except (ValueError, ZeroDivisionError):\r\n#     print(\"Нельзя вводить строки или Нельзя делить на ноль\")\r\n# else:  # когда в блоке try не возникло исключения\r\n#     print(\"Все нормально. Вы ввели числа\", n, \"и\", m)\r\n# finally:  # выполнится в любом случае\r\n#     print(\"Конец программы\")\r\n\r\n# n = input(\"Введите первое число: \")  # '10'\r\n# m = input(\"Введите второе число: \")  # qqq\r\n#\r\n# try:\r\n#     n = int(n)  # 10\r\n#     m = int(m)  #\r\n# except ValueError:\r\n#     n = str(n)\r\n# finally:\r\n#     print(n + m)\r\n\r\n# Циклы\r\n\r\n# while условие:\r\n#     блок_инструкций\r\n\r\n# i = 0  # счетчик\r\n# while i < 5:  # условие\r\n#     print(\"i =\", i)\r\n#     i += 1  # изменение счетчика\r\n\r\n\r\n# итерация - один шаг цикла\r\n\r\n# i = 0\r\n# while i < 100:\r\n#     print(\"i =\", i)\r\n#     i += 10\r\n\r\n\r\n# i = 10\r\n# while i > 0:\r\n#     print(\"i =\", i)\r\n#     i -= 1\r\n\r\n# i = 2\r\n# while i <= 20:\r\n#     if i % 2:  # i % 2 == 1, i % 2 != 0 - нечетные числа, i % 2 == 0 - четные числа\r\n#         print(i, end=\" \")\r\n#     i += 1\r\n\r\n# i = 2\r\n# while i <= 20:\r\n#     print(i, end=\" \")\r\n#     i += 2\r\n\r\n# n = int(input(\"Количество символов: \"))\r\n# print(\"*\" * n)\r\n# i = 0\r\n# while i < n:\r\n#     print(\"*\", end=\"\")\r\n#     i += 1\r\n\r\n# +-+-+-+\r\n\r\n# n = int(input(\"Количество символов: \"))\r\n# i = 0\r\n# while i < n:\r\n#     if i % 2 == 0:\r\n#         print(\"+\", end=\"\")\r\n#     else:\r\n#         print(\"-\", end=\"\")\r\n#     i += 1\r\n\r\n\r\n# n = int(input(\"Количество символов: \"))\r\n# print(\"+\" * n)\r\n\r\n\r\n# n = int(input(\"Количество символов: \"))\r\n# while n > 0:\r\n#     print(\"*\", end=\"\")\r\n#     n -= 1\r\n\r\n# a = int(input(\"Введите начало диапазона: \"))\r\n# b = int(input(\"Введите конец диапазона: \"))\r\n# res = 0\r\n# while a <= b:\r\n#     if a % 2:\r\n#         print(a, end=\" \")\r\n#         res += a  # res = res + a\r\n#     a += 1\r\n# print(\"\\nСумма:\", res)\r\n\r\n# n = input(\"Введите целое число: \")  # 'пять'\r\n#\r\n# while type(n) is not int:  # type(n) != int\r\n#     try:\r\n#         n = int(n)  # 8\r\n#     except ValueError:\r\n#         print(\"Число не целое!\")\r\n#         n = input(\"Введите целое число: \")  # '8'\r\n#\r\n# if n % 2 == 0:\r\n#     print(\"Четное\")\r\n# else:\r\n#     print(\"Нечетное\")\r\n\r\n# i = 0\r\n# while i < 10:\r\n#     if i == 3:\r\n#         i += 1\r\n#         continue\r\n#     print(i, end=\" \")\r\n#     if i == 5:\r\n#         break\r\n#     i += 1\r\n# print(\"\\nЦикл завершен\")\r\n\r\n# i = 0\r\n# while True:\r\n#     print(i)\r\n#     if i == 5:\r\n#         break\r\n#     i += 1\r\n\r\n# while True:\r\n#     n = int(input(\"Введите положительное число: \"))\r\n#     if n < 0:\r\n#         break\r\n\r\n# res = 1\r\n# while True:\r\n#     n = int(input(\"Введите число: \"))\r\n#     if n == 0:\r\n#         break\r\n#     res *= n  # res = res * n\r\n# print(\"Результат:\", res)\r\n\r\n# i = 0\r\n# while i < 10:\r\n#     if i == 5:\r\n#         break\r\n#     print(i)\r\n#     i += 1\r\n# else:\r\n#     print(\"Цикл окончен, i =\", i)\r\n\r\n# i = 1\r\n# while i < 5:  # 2\r\n#     print(\"Внешний цикл: i =\", i)\r\n#     j = 1\r\n#     while j < 4:  # 1\r\n#         print(\"\\tВнутренний цикл: j =\", j)\r\n#         j += 1\r\n#     i += 1\r\n\r\n\r\n# i = 1\r\n# while i < 10:\r\n#     j = 1\r\n#     while j < 10:\r\n#         print(i, \"*\", j, \"=\", i * j, end=\"\\t\\t\")\r\n#         j += 1\r\n#     print()\r\n#     i += 1\r\n\r\n# i = 0\r\n# while i < 3:\r\n#     j = 0\r\n#     while j < 6:\r\n#         print(\"^\", end=\"\")\r\n#         j += 1\r\n#     print()\r\n#     i += 1\r\n\r\n# i = 0\r\n# while i < 5:\r\n#     j = 0\r\n#     while j < 16:\r\n#         if j % 2 == 0:\r\n#             print(\"+\", end=\"\")\r\n#         else:\r\n#             print(\"-\", end=\"\")\r\n#         j += 1\r\n#     print()\r\n#     i += 1\r\n\r\n# for element in collection:\r\n#    print(element)\r\n\r\n# for i in \"Hello!\", \"World\":\r\n#     print(i)\r\n\r\n# range(start=0, stop, step=1)\r\n\r\n# a = 10\r\n# for i in range(0, 10, 1):  # i = 0, i < 10, i += 1  # i = 10, i > 0, i -= 1\r\n#     print(i, end=\" \")\r\n#\r\n# print()\r\n#\r\n# i = 1\r\n# while i < 10:\r\n#     print(i, end=\" \")\r\n#     i *= 2\r\n\r\n\r\n# a = int(input(\"Введите целое число: \"))\r\n#\r\n# for i in range(1, a + 1):\r\n#     if a % i == 0:\r\n#         print(i, end=\" \")\r\n\r\n# for i in range(10, 100):\r\n#     if i % 11 == 0:\r\n#         print(i, end=\" \")\r\n#\r\n# print()\r\n#\r\n# for i in range(11, 100, 11):\r\n#     print(i, end=\" \")\r\n#\r\n# print()\r\n#\r\n# for i in range(10, 100):\r\n#     if i % 10 == i // 10:\r\n#         print(i, end=\" \")\r\n\r\n# for i in range(3):\r\n#     print(i)\r\n#     if i == 1:\r\n#         break\r\n# else:\r\n#     print(\"Цикл закончен\")\r\n\r\n# for i in range(3):  # 3\r\n#     print(\"+++\")\r\n#     for j in range(2):  # 0\r\n#         print(\"-----\")\r\n\r\n# w = int(input(\"Введите ширину прямоугольника: \"))\r\n# h = int(input(\"Введите высоту прямоугольника: \"))\r\n#\r\n# for i in range(h):\r\n#     for j in range(w):\r\n#         if i == 0 or i == h - 1 or j == 0 or j == w - 1:\r\n#             print(\"*\", end=\"\")\r\n#         else:\r\n#             print(\" \", end=\"\")\r\n#     print()\r\n\r\n# letter = [i * 2 for i in \"Hello\"]\r\n# print(letter)\r\n#\r\n# for i in \"Hello\":\r\n#     print(i * 2)\r\n\r\n# num = [i for i in range(30) if i % 2 == 0]\r\n# print(num)\r\n#\r\n# for i in range(30):\r\n#     if i % 2 == 0:\r\n#         print(i, end=\", \")\r\n\r\n\r\n# Список (list)\r\n# nums = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\r\n# print(nums)\r\n# print(type(nums))\r\n# print(nums[0])\r\n# print(nums[1])\r\n# print(nums[10])\r\n# print(nums[-1])\r\n# # print(nums[len(nums)-1])\r\n# print(\"Кол-во:\", len(nums))\r\n# nums[1] = 256\r\n# nums[3] += 100\r\n# print(nums)\r\n\r\n# s = []\r\n# print(s)\r\n# print(type(s))\r\n#\r\n# t = list(\"Python\")\r\n# print(t)\r\n# print(type(t))\r\n#\r\n# print(range(0, 8, 2))\r\n# print(list(range(1, 18, 2)))\r\n\r\n# a = [1, 3, 5, 7, 9]\r\n# b = [11, 13, 15, 17]\r\n# print(a + b)\r\n# print(a * 3)\r\n\r\n# a = [1, 3, 5, 7, 9]\r\n#\r\n# for i in a:\r\n#     print(i)\r\n\r\n# a = [0 for _ in range(5)]\r\n# print(a)  # [0, 0, 0, 0, 0]\r\n\r\n# a = [i for i in range(5)]\r\n# print(a)  # [0, 1, 2, 3, 4]\r\n\r\n# n = 15\r\n# a = [i ** 2 for i in range(2, n)]\r\n# print(a)  # [0, 1, 2, 3, 4]\r\n\r\n# a = [0] * int(input(\"Введите количество элементов списка: \"))\r\n# print(a)\r\n# for i in range(len(a)):\r\n#     a[i] = int(input(\"-> \"))\r\n# print(a)\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n\r\n# lst = [9, 6, 3, 5]\r\n#\r\n# for i in range(len(lst)):  # 0 1 2 3\r\n#     print(lst[i], end=\" \")\r\n#\r\n# print()\r\n#\r\n# for v in lst:  # 9 6 3 5\r\n#     print(v, end=\" \")\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n# res = 0\r\n# # for i in range(len(a)):  # 0 1 2 3 4\r\n# #     if a[i] < 0:\r\n# #         res += a[i]\r\n#\r\n# for i in a:  # 9, -2, 7, -3, 4\r\n#     if i < 0:\r\n#         res += i\r\n#\r\n# print(res)\r\n\r\n\r\n# n = list(range(21, 41))\r\n# print(n)\r\n# count = sum_ = 0\r\n# # for i in range(len(n)):\r\n# #     if n[i] % 2 == 0:\r\n# #         count += 1\r\n# #     else:\r\n# #         sum_ += n[i]\r\n#\r\n# for i in n:\r\n#     if i % 2 == 0:\r\n#         count += 1\r\n#     else:\r\n#         sum_ += i\r\n#\r\n# print(\"Количество четных элементов списка:\", count)\r\n# print(\"Сумма нечетных элементов списка:\", sum_)\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n# for i in range(len(a)):\r\n#     if i % 2 == 0:\r\n#         print(a[i], end=\" \")\r\n# print()\r\n#\r\n# for i in range(0, len(a), 2):\r\n#     print(a[i], end=\" \")\r\n\r\n# a = [int(input(\"-> \")) for i in range(int(input(\"n = \")))]\r\n# print(a)\r\n# for i in range(1, len(a)):\r\n#     if a[i] > a[i - 1]:\r\n#         print(a[i], end=\" \")\r\n\r\n# a = [9, 7, 8, 4, 2]\r\n# print(a)\r\n# a[0], a[1] = a[1], a[0]\r\n# print(a)\r\n\r\n# Срез\r\n\r\n# список[start:stop:step]\r\n# a = [9, 7, 8, 4, 2, 1, 3]\r\n# print(a)\r\n# print(a[1:4])\r\n# print(a[5:])\r\n# print(a[1:4:2])\r\n# print(a[::-2])\r\n# print(a[-1:0:-1])\r\n# print(a[10:20])\r\n\r\n# lst = list(range(1, 8))\r\n# print(lst)\r\n# print(lst[::-1])\r\n# print(lst[::2])\r\n# print(lst[1::2])\r\n# print(lst[:1])\r\n# print(lst[-1:])\r\n# print(lst[3:4])\r\n# print(lst[4:])\r\n# print(lst[4:1:-1])\r\n# print(lst[2:5])\r\n\r\n# a = [1, 2, 3, 4, 5, 6, 7]\r\n# print(a)\r\n# a[1:3] = [0, 0, 0, 0]\r\n# print(a)\r\n# a[1:2] = [20]\r\n# print(a)\r\n# a[2] = [120, 45]\r\n# print(a)\r\n\r\n# a[100:111] = [100]\r\n# print(a)\r\n# print(a[9])\r\n# print(len(a))\r\n\r\n# Методы списков\r\n# print(dir(list))\r\n# ['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']\r\n\r\n# s = [9, 7, 8, 4, 2, 1, 3]\r\n# print(s)\r\n# s.append(99)  # добавляет элемент в конец списка\r\n# print(s)\r\n# s.extend([11, 12, 13])  # добавляет список элементов в конец списка\r\n# print(s)\r\n# s.insert(2, 100)  # добавляет элемент (второй параметр) по заданном индексу (первый параметр)\r\n# print(s)\r\n\r\n# s.insert(20, 5)\r\n# print(s)\r\n\r\n# s = []\r\n# n = int(input(\"Количество элементов в списке: \"))\r\n# for num in range(n):\r\n#     x = int(input(\"Введите число: \"))\r\n#     # s.append(x)\r\n#     s.insert(0, x)  # [7, 8, 9]\r\n# print(s)\r\n\r\n# a = [5, 9, 2, 1, 4, 3, 2, 4]\r\n# b = [4, 2, 1, 3, 7, 2]\r\n# c = []  # [2, 1, 4, 3]\r\n#\r\n# for i in a:  # 2\r\n#     for j in b:  # 2\r\n#         if i in c:\r\n#             continue\r\n#         if i == j:  # 2 == 2\r\n#             c.append(i)\r\n#             break\r\n# print(c)\r\n\r\n# a = [5, 9, 2, 1, 4, 3, 2, 4]  #\r\n# b = [4, 2, 1, 3, 7, 2]  #\r\n# c = []\r\n#\r\n# for i in a:\r\n#     if i in b and i not in c:\r\n#         c.append(i)\r\n# print(c)\r\n\r\n# a = [1, 2, 3]\r\n# b = [11, 22, 33, 4, 2]\r\n# c = []\r\n#\r\n# if len(b) > len(a):\r\n#     for i in range(len(a)):  # 0, 1, 2, 3, 4\r\n#         c.append(a[i])\r\n#         c.append(b[i])\r\n#     for i in range(len(a), len(b)):\r\n#         c.append(b[i])\r\n# else:\r\n#     for i in range(len(b)):  # 0, 1, 2, 3, 4\r\n#         c.append(a[i])\r\n#         c.append(b[i])\r\n#     for i in range(len(b), len(a)):\r\n#         c.append(a[i])\r\n#\r\n# print(c)\r\n\r\n# a = [1, 2, 3, 4, 2]\r\n# b = [11, 22, 33]\r\n# c = []\r\n#\r\n# if len(a) > len(b):\r\n#     a, b = b, a\r\n#\r\n# for i in range(len(a)):  # 0, 1, 2, 3, 4\r\n#     c.append(a[i])\r\n#     c.append(b[i])\r\n# for i in range(len(a), len(b)):\r\n#     c.append(b[i])\r\n#\r\n# print(c)\r\n\r\n# s = [9, 7, 8, 4, 2, 8, 1, 3]\r\n# print(s)\r\n# item = 7\r\n# if item in s:\r\n#     s.remove(item)  # удаляет первое вхождение элемента по значению\r\n# print(s)\r\n\r\n# last = s.pop()  # удаляет последний элемент из списка\r\n# print(last)\r\n# print(s)\r\n#\r\n#\r\n# try:\r\n#     second = s.pop(10)  # удаляет элемент по заданному индексу\r\n# except IndexError:\r\n#     second = \"Такого индекса нет\"\r\n# print(second)\r\n# print(s)\r\n#\r\n# s.clear()  # удаляет элементы из списка\r\n# print(s)\r\n\r\n# s = [9, 7, 8, 4, 2, 8, 1, 3]\r\n# print(s)\r\n#\r\n# s[5:] = []\r\n# print(s)\r\n#\r\n# del s[:]\r\n# print(s)\r\n\r\n# s = [9, 7, 8, 4, 2, 8, 1, 3, 8]\r\n# print(s)\r\n#\r\n# # num = s.count(9)  # количество вхождений заданного элемента\r\n# # print(num)\r\n#\r\n# ind = s.index(8, 3, 7)  # ищет первое вхождение заданного элемента, возвращает индекс на котором\r\n# # нашел элемент, можно задать диапазон поиска\r\n# print(ind)\r\n\r\n# m = [1, 3, 5, 6, 2, 4, 6, 1, 2, 7]\r\n# print(m)\r\n# for i in m:\r\n#     if m.count(i) == 1:\r\n#         print(i, end=\" \")\r\n# print()\r\n# mas = [i for i in m if m.count(i) == 1]\r\n# print(mas)\r\n\r\n# a = [1, 2, 3]\r\n# b = a.copy()\r\n# print(\"a =\", a, id(a))\r\n# print(\"b =\", b, id(b))\r\n# b.append(20)\r\n# print(\"a =\", a)\r\n# print(\"b =\", b)\r\n# a.append(100)\r\n# print(\"a =\", a, id(a))\r\n# print(\"b =\", b, id(b))\r\n\r\n\r\n# m = [1, 3, 5, 6, 2, 4, 6, 1, 2, 7]\r\n# # print(m)\r\n# # m.reverse()\r\n# # # print(m)\r\n# m.sort(reverse=True)\r\n# print(m)\r\n#\r\n# # s = [\"Виталий\", \"Сергей\", \"Александр\", \"Анна\"]\r\n# # s.sort(key=len, reverse=True)\r\n# # print(s)\r\n#\r\n# s = [1, 3, 5, 6, 2, 4, 6, 1, 2, 7]\r\n#\r\n# print(\"lst:\", sorted(s, reverse=True))\r\n# print(s)\r\n# print()\r\n\r\n\r\n# import random\r\n\r\n# print(random.random())\r\n# print(random.randint(5, 10))\r\n# print(random.randrange(5, 10, 2))\r\n# print(round(random.uniform(10.5, 25.5), 2))\r\n\r\n# city_list = [\"Москва\", \"Новосибирск\", \"Воронеж\", \"Сочи\", \"Екатеринбург\"]\r\n# s = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\r\n\r\n# print(random.choice(city_list))\r\n# print(random.choice(s))\r\n# print(random.choices(city_list, k=3))\r\n# print(random.choices(s, k=3))\r\n# random.shuffle(s)\r\n# print(s)\r\n\r\n\r\n# import random\r\n#\r\n# mas = [random.randint(50, 100) for i in range(5)]\r\n# print(mas)\r\n# print(len(mas))\r\n# print(max(mas))\r\n# print(min(mas))\r\n# print(sum(mas))\r\n\r\n# import random\r\n# mas = [random.randint(0, 100) for i in range(10)]\r\n# print(mas)\r\n# max_ = max(mas)\r\n# print(max_)\r\n# mas.remove(max_)\r\n# mas.insert(0, max_)\r\n# print(mas)\r\n\r\n\r\n# import random\r\n# mas = [random.randint(0, 100) for i in range(10)]\r\n# print(mas)\r\n#\r\n# min_ = min(mas)\r\n# print(\"Min:\", min_)\r\n#\r\n# ind = mas.index(min_)\r\n# print(\"Index min:\", ind)\r\n#\r\n# del mas[:ind]\r\n# print(mas)\r\n\r\n\r\n# m = [\r\n#     [1, 2, 3, 4],  # 0\r\n#     [5, 6, 7, 8],  # 1\r\n#     [9, 10, 11, 12]  # 2\r\n# ]\r\n# print(m)\r\n#\r\n# # print(len(m))\r\n# # print(m[1][2])\r\n# # print(m[2][1])\r\n#\r\n# print(\"Вариант 1\")\r\n# for row in range(len(m)):\r\n#     for col in range(len(m[row])):\r\n#         print(m[row][col], end=\"\\t\")\r\n#     print()\r\n# print(\"Вариант 2\")\r\n# for row in m:\r\n#     for x in row:\r\n#         print(x, end=\"\\t\")\r\n#     print()\r\n\r\n# m = [\"Hello\", \"World\", [44, [1, 2, 3], 55, [\"Python\", \"new\"]]]\r\n# print(m)\r\n# print(m[1][2])\r\n# print(m[2][1][1])\r\n# print(m[2][3][0][3])\r\n\r\n# import math\r\n#\r\n# print(math.sqrt(4))\r\n# print(math.ceil(3.2))\r\n# print(math.floor(3.8))\r\n\r\n\r\n# import math as m\r\n#\r\n# print(m.sqrt(4))\r\n# print(m.ceil(3.2))\r\n# print(m.floor(3.8))\r\n\r\n# from math import *\r\n#\r\n# print(sqrt(4))\r\n# print(ceil(3.2))\r\n# print(floor(3.8))\r\n\r\n# from math import sqrt, ceil, floor\r\n#\r\n# print(sqrt(4))\r\n# print(ceil(3.2))\r\n# print(floor(3.8))\r\n# import math\r\n# print(dir(math))\r\n\r\n# from math import pi\r\n#\r\n# # print(pi)\r\n# radius = int(input(\"Введите радиус окружности: \"))\r\n# print(\"Длина окружности:\", round(2 * radius * pi, 2))\r\n\r\n# import time\r\n# import locale\r\n\r\n# print(time.time())\r\n# print(time.ctime(739210060))\r\n# res = time.localtime()\r\n# print(res)\r\n# print(res.tm_year, \"-\", res.tm_mon, \"-\", res.tm_mday, sep=\"\")\r\n# print(time.strftime(\"Today is %B %d, %Y\"))\r\n# # print(time.strftime(\"%m/%d/%Y, %H:%M:%S\", time.localtime(539210060)))\r\n# locale.setlocale(locale.LC_ALL, \"ru\")\r\n# print(time.strftime(\"Сегодня: %B %d, %Y\"))\r\n\r\n# start = time.time()\r\n# print(\"Запуск программы\")\r\n# time.sleep(5)\r\n# res = time.time() - start\r\n# print(\"Программа выполнилась за\", res, \"сек.\")\r\n\r\n# import math\r\n# from math import sqrt, pi\r\n#\r\n# s = None\r\n# shape = int(input(\"Выбор фигуры:\\n1-треугольник\\n2-прямоугольник\\n3-круг\\n: \"))\r\n# if shape == 1:\r\n#     a = int(input(\"Введите строну a = \"))\r\n#     b = int(input(\"Введите строну b = \"))\r\n#     c = int(input(\"Введите строну c = \"))\r\n#     p = (a + b + c) / 2\r\n#     s = sqrt(p * (p - a) * (p - b) * (p - c))\r\n# elif shape == 2:\r\n#     a = int(input(\"Введите строну a = \"))\r\n#     b = int(input(\"Введите строну b = \"))\r\n#     s = a * b\r\n# elif shape == 3:\r\n#     radius = int(input(\"Введите радиус = \"))\r\n#     s = pi * radius ** 2\r\n# else:\r\n#     print(\"Такой фигуры нет\")\r\n#\r\n# print(round(s, 2))\r\n\r\n\r\n# Функции\r\n\r\n# def hello(first_name, age):   # аргументы\r\n#     print(\"Меня зовут:\", first_name, \"Мой возраст:\", age)\r\n#\r\n#\r\n# hello(\"Irina\", 28)  # параметры\r\n# hello(\"Ivan\", 25)\r\n\r\n\r\n# def get_sum(a, b):\r\n#     print(a + b)\r\n#\r\n#\r\n# x = 2\r\n# y = 5\r\n# get_sum(x, y)\r\n# get_sum(\"abc\", \"def\")\r\n\r\n\r\n# def symbol(count, a, b):\r\n#     for i in range(count):\r\n#         if i % 2 == 0:\r\n#             print(a, end=\"\")\r\n#         else:\r\n#             print(b, end=\"\")\r\n#     print()\r\n#\r\n#\r\n# symbol(9, \"+\", \"-\")\r\n# symbol(7, \"X\", \"0\")\r\n\r\n# def get_sum(a, b):\r\n#     print(\"Сумма:\", end=\" \")\r\n#     c = a + b\r\n#     return c\r\n#\r\n#\r\n# x = 2\r\n# y = 5\r\n# res = get_sum(x, y)\r\n# print(res)\r\n\r\n# def maximum(one, two):\r\n#     if one > two:\r\n#         return one\r\n#     else:\r\n#         return two\r\n#\r\n#\r\n# print(maximum(9, 5))\r\n# print(maximum(5, 15))\r\n\r\n# def zadacha(a, b):\r\n#     if a > b:\r\n#         return a - b\r\n#     else:\r\n#         return a + b\r\n#\r\n#\r\n# x = int(input(\"a = \"))\r\n# y = int(input(\"y = \"))\r\n# print(zadacha(x, y))\r\n\r\n\r\n# def cube(a):\r\n#     return a * a * a\r\n#\r\n#\r\n# for i in range(1, 11):\r\n#     print(i, \"в кубе =\", cube(i))\r\n\r\n# def change(lst):\r\n#     end = lst.pop()\r\n#     start = lst.pop(0)\r\n#     lst.append(start)\r\n#     lst.insert(0, end)\r\n#     return lst\r\n\r\n# def change(lst):\r\n#     lst[0], lst[-1] = lst[-1], lst[0]\r\n#     return lst\r\n#\r\n#\r\n# print(change([1, 2, 3]))\r\n# print(change([9, 12, 33, 54, 105]))\r\n# print(change([\"с\", \"л\", \"о\", \"н\"]))\r\n\r\n# def one_big(x, y):\r\n#     if x > y:\r\n#         return True\r\n#     else:\r\n#         return False\r\n#\r\n#\r\n# a = int(input(\"Введите первое число: \"))\r\n# b = int(input(\"Введите второе число: \"))\r\n# if one_big(a, b):\r\n#     print(\"Первое число больше второго\")\r\n# else:\r\n#     print(\"Второе число больше первого\")\r\n\r\n# print(one_big(10, 5))\r\n# print(one_big(5, 10))\r\n\r\n# def check_password(password):\r\n#     has_upper = False\r\n#     has_lower = False\r\n#     has_num = False\r\n#\r\n#     for ch in password:\r\n#         if \"A\" <= ch <= \"Z\":  # \"A\" <= \"S\" <= \"Z\"\r\n#             has_upper = True\r\n#         if \"a\" <= ch <= \"z\":\r\n#             has_lower = True\r\n#         if \"0\" <= ch <= \"9\":  # \"0\" <= \"8\" <= \"9\"\r\n#             has_num = True\r\n#\r\n#     if len(password) >= 8 and has_upper and has_lower and has_num:\r\n#         return True\r\n#     return False\r\n#\r\n#\r\n# p = input(\"Введите пароль: \")\r\n# if check_password(p):\r\n#     print(\"Это надежный пароль\")\r\n# else:\r\n#     print(\"Это ненадежный пароль\")\r\n\r\n# res = 10\r\n#\r\n#\r\n# def get_sum(a, b, c=0, d=1):\r\n#     inner = 20\r\n#     return a + b + c + d + res + inner\r\n#\r\n#\r\n# print(get_sum(1, 5, 2, 7))\r\n\r\n# print(get_sum(1, 5, 2))\r\n# print(get_sum(1, 5))\r\n# print(get_sum(1, 5, d=2, c=5))\r\n# print(get_sum(\"С\", \"л\", d=\"н\", c=\"о\"))\r\n\r\n\r\n# def set_param(count=20, symbol=\"-\"):\r\n#     print(symbol * count)\r\n#\r\n#\r\n# set_param(10, \"+\")\r\n# set_param(5, \"*\")\r\n# set_param(15, \"#\")\r\n# set_param(7)\r\n# set_param()\r\n\r\n\r\n# def display_info(name, age):\r\n#     print(\"Name:\", name, \"\\nAge:\", age)\r\n#\r\n#\r\n# display_info(\"Irina\", 23)\r\n#\r\n#\r\n# def display_info(name, age):\r\n#     print(\"Hello,\", name)\r\n#\r\n#\r\n# display_info(\"Irina\", 23)\r\n# display_info(23, \"Irina\")\r\n# display_info(age=23, name=\"Irina\")\r\n# display_info(\"Igor\", age=23, name=\"Irina\")\r\n\r\n\r\n# lt1 = \"Hello\"\r\n# lt2 = \"Hello\"\r\n# print(lt1, id(lt1))\r\n# print(lt2, id(lt2))\r\n# print(lt1 == lt2)\r\n# print(lt1 is lt2)\r\n#\r\n# lst1 = [1, 2, 3]\r\n# lst2 = [1, 2, 3]\r\n# print(lst1, id(lst1))\r\n# print(lst2, id(lst2))\r\n# print(lst1 == lst2)\r\n# print(lst1 is lst2)\r\n\r\n# lst1 = [1, 2, 3]\r\n# print(lst1, id(lst1))\r\n# lst1.append(4)\r\n# print(lst1, id(lst1))\r\n# lst1.pop(1)\r\n# print(lst1, id(lst1))\r\n\r\n# lt1 = \"Hello\"\r\n# print(lt1, id(lt1))\r\n# lt1 = lt1[5:10]\r\n# print(lt1, id(lt1))\r\n# lt1 = lt1 + \"!\"\r\n# print(lt1, id(lt1))\r\n\r\n# a = 5\r\n# print(a, id(a))\r\n# a = 7\r\n# print(a, id(a))\r\n\r\n\r\n# Кортеж (tuple)\r\n\r\n# lst = [10, 20, 30]\r\n# tpl = (10, 20, 30)\r\n# print(lst.__sizeof__())\r\n# print(tpl.__sizeof__())\r\n# lst[1] = 100\r\n# print(lst)\r\n\r\n# a = ()\r\n# print(a, type(a))\r\n# b = tuple()\r\n# print(b, type(b))\r\n\r\n\r\n# a = (1, 2, 3)\r\n# print(a, type(a))\r\n#\r\n# b = tuple(\"Hello\")\r\n# print(b, type(b))\r\n\r\n\r\n# b = tuple(\"Hello\")\r\n# print(b)\r\n#\r\n# print(b[1])\r\n# print(b[1:3])\r\n\r\n# s1 = tuple(input(\"-> \") for i in range(5))\r\n# print(s1)\r\n\r\n# s1 = tuple(i for i in range(5))\r\n# print(s1)\r\n\r\n# from random import randint\r\n#\r\n# s1 = tuple(randint(50, 100) for i in range(5))\r\n# print(s1)\r\n\r\n# t1 = tuple(\"hello\")\r\n# t2 = tuple(\"world\")\r\n# print(t1)\r\n# print(t2)\r\n# t3 = t1 + t2\r\n# print(t3 * 2)\r\n# print(t3)\r\n# print(t3.count(\"a\"))\r\n# print(t3.index(\"l\", 4, -2))\r\n# print(dir(list))\r\n# print(dir(tuple))\r\n\r\n# v = \"a\"\r\n# if v in t3:\r\n#     print(t3.index(v))\r\n# else:\r\n#     print(\"Такого символа нет\")\r\n\r\n\r\n# def slicer(tpl, el):\r\n#     if el in tpl:\r\n#         if tpl.count(el) == 1:\r\n#             return tpl[tpl.index(el):]  # tpl[2:]\r\n#         else:\r\n#             first = tpl.index(el)\r\n#             second = tpl.index(el, first + 1) + 1  # tpl[5]\r\n#             return tpl[first:second]  # [1:5]\r\n#     else:\r\n#         return tuple()\r\n#\r\n#\r\n# print(slicer((1, 2, 3), 8))\r\n# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))\r\n# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))\r\n\r\n# t = (10, \"Python\", True, [1, 2, 3], [\"hello\", \"world\"])\r\n# print(t, id(t))\r\n# t[4][0] = \"new\"\r\n# print(t, id(t))\r\n# print(len(t))\r\n# t[4].append(\"hi\")\r\n# print(t, id(t))\r\n\r\n# Распаковка кортежа\r\n\r\n# t = (1, 2, 3)\r\n# # x = t[0]\r\n# # y = t[1]\r\n# # z = t[2]\r\n# x, y, z = t  # Распаковка кортежа\r\n# # x, y, z = 1, 2, 3\r\n# print(x, y, z)\r\n\r\n\r\n# def get_user():\r\n#     name = \"Tom\"\r\n#     age = 22\r\n#     is_married = False\r\n#     return name, age, is_married\r\n#\r\n#\r\n# # user = get_user()\r\n# # print(user)\r\n# # first_name, year, married = user\r\n#\r\n# first_name, year, married = get_user()\r\n# print(first_name, year, married)\r\n\r\n\r\n# lst = [1, 2, 3, 4, 5, 6]\r\n# print(lst, type(lst))\r\n# tpl = tuple(lst)\r\n# print(tpl, type(tpl))\r\n# lst2 = list(tpl)\r\n# print(lst2, type(lst2))\r\n\r\n# countries = (\r\n#     (\"Германия\", 80.2, ((\"Берлин\", 3.326), (\"Гамбург\", 1.718))),\r\n#     (\"Франция\", 66, ((\"Париж\", 2.2), (\"Марсель\", 1.6)))\r\n# )\r\n# print(countries, end=\"\\n\\n\")\r\n#\r\n# for county in countries:\r\n#     county_name, county_population, cities = county\r\n#     print(\"\\nСтрана: \", county_name, \", население = \", county_population, sep=\"\")\r\n#     for city in cities:\r\n#         city_name, city_population = city\r\n#         print(\"\\tГород: \", city_name, \", население = \", city_population, sep=\"\")\r\n\r\n\r\n# tpl = tuple(input(\"Введите строку: \"))\r\n# print(tpl)\r\n#\r\n# lst = []\r\n# for i in range(len(tpl)):\r\n#     if tpl[i] not in lst:\r\n#         lst.append(tpl[i])\r\n#\r\n# for i in range(len(lst)):\r\n#     print(\"Количество\", lst[i], \"=\", tpl.count(lst[i]))\r\n\r\n\r\n# Множество (set)\r\n\r\n# s = {\"red\", \"yellow\", \"green\", \"yellow\", \"green\"}\r\n# print(s, type(s))\r\n# print(len(s))\r\n\r\n# a = set(\"hello\")\r\n# print(a, type(a))\r\n\r\n# s = {x * x for x in range(10)}\r\n# print(s)\r\n\r\n# lst = [1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 6]\r\n# lst = [\"red\", \"yellow\", \"green\", \"yellow\", \"green\"]\r\n# print(lst)\r\n# num = set(lst)\r\n# print(num)\r\n# lst2 = list(num)\r\n# print(lst2)\r\n\r\n# t = {'yellow', 'red', 'green'}\r\n# print('red' in t)\r\n# print('blue' in t)\r\n# for i in t:\r\n#     print(i)\r\n\r\n\r\n# lst = ['ab_1', \"ac_1\", 'bc_1', 'bc_2']\r\n# print({i for i in lst if 'a' in i})\r\n# print(['A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in lst])\r\n# tpl = tuple('A' + i[1:] if i[0] == 'a' else 'B' + i[1:] for i in lst if i[1] == 'c')\r\n# print(tpl)\r\n\r\n# print(dir(set))\r\n\r\n# a = {\"red\", \"yellow\", \"green\"}\r\n# print(a)\r\n# a.add(\"blue\")\r\n# print(a)\r\n# # a.remove(\"yellow\")\r\n# # a.remove(\"black\")  # KeyError\r\n# color = \"black\"\r\n# # if color in a:\r\n# #     a.remove(color)\r\n# # a.discard(color)\r\n# # a.pop()\r\n# a.clear()\r\n# print(a)\r\n\r\n\r\n# print({i / 2 for i in range(1000, 1010)})\r\n\r\n# from random import randint\r\n#\r\n#\r\n# def ran(a, b):\r\n#     return tuple(randint(a, b) for i in range(10))\r\n#\r\n#\r\n# tpl1 = ran(0, 5)\r\n# print(tpl1)\r\n# tpl2 = ran(-5, 0)\r\n# print(tpl2)\r\n# tpl3 = tpl1 + tpl2\r\n# print(tpl3)\r\n# print(\"0 =\", tpl3.count(0))\r\n\r\n# a = {0, 1, 2, 3}\r\n# b = {4, 3, 2, 1}\r\n# # c = a.union(b)\r\n# # c = a | b  # {0, 1, 2, 3, 4}\r\n# # print(c)#\r\n# # c = a & b  # {1, 2, 3}\r\n# # print(c)\r\n# # c = a - b  # {0}\r\n# # print(c)\r\n# c = a ^ b  # {0}\r\n# print(c)\r\n# # a |= b\r\n# # print(a)\r\n# # a &= b\r\n# # print(a)\r\n# # a -= b\r\n# # print(a)\r\n# a ^= b\r\n# print(a)\r\n\r\n# a = {0, 1, 2, 3, 4}\r\n# b = {3, 2, 1}\r\n# c = a >= b\r\n# print(c)\r\n\r\n# a = {0, 1, 2, 3}\r\n# b = {4, 3, 2, 1}\r\n# c = {6, 2}\r\n# e = {8, 2}\r\n# d = b ^ c ^ a ^ e  # {0, 4, 6, 8}\r\n# d = a.symmetric_difference(b).symmetric_difference(c).symmetric_difference(e)  #\r\n# print(d)\r\n\r\n# s1 = {1, 2}\r\n# s2 = {3}\r\n# s3 = {4, 5}\r\n# s4 = {3, 2, 6}\r\n# s5 = {6}\r\n# s6 = {1, 2}\r\n# s7 = {1, 2}\r\n\r\n# a = {1, 2}\r\n# b = {3}\r\n# c = {4, 5}\r\n# d = {3, 2, 6}\r\n# e = {6}\r\n# f = {7, 8}\r\n# g = {9, 8}\r\n# su = a.symmetric_difference(b).symmetric_difference(c).symmetric_difference(d).symmetric_difference(\r\n#     e).symmetric_difference(f).symmetric_difference(g)\r\n# print(su)\r\n# print(len(su))\r\n# print(min(su))\r\n# print(max(su))\r\n\r\n# a = {1, 2}\r\n# b = {3}\r\n# c = {4, 5}\r\n# d = {3, 2, 6}\r\n# e = {6}\r\n# f = {7, 8}\r\n# g = {9, 8}\r\n# h = a | b | c | d | e | f | g\r\n# print(h)\r\n# print('Unic elems count', (len(h)))\r\n# print('Min elem: ', min(h))\r\n# print('Max elem: ', max(h))\r\n\r\n# s1 = \"Hello\"\r\n# s2 = \"How are you\"\r\n# s3 = set(s1) & set(s2)\r\n# print(s3)\r\n# for i in s3:\r\n#     print(i, end=\" \")\r\n\r\n# s = frozenset([1, 2, 3, 4, 5, 6])\r\n# print(s)\r\n# s1 = frozenset(\"hello\")\r\n# print(s1)\r\n\r\n\r\n# Словарь (dict)\r\n\r\n# lst = [\"one\", \"two\"]\r\n# d = {\"first\": \"one\", \"second\": \"two\"}\r\n#\r\n# print(lst[1])\r\n# print(d[\"second\"])\r\n\r\n# d = {0: \"text\", \"one\": 45, (1, 2): \"Кортеж\", True: [5, 9, 8, 7, 7], False: \"один\", 1: \"Список\"}\r\n# print(d)\r\n\r\n\r\n# d = {1: \"one\", \"second\": \"two\"}\r\n# print(d)\r\n# print(type(d))\r\n#\r\n# d1 = dict(first=\"one\", second=\"two\")\r\n# print(d1)\r\n# print(type(d1))\r\n\r\n# lst = [\r\n#     [\"one\", 1],\r\n#     [\"two\", 2],\r\n#     [\"three\", 3]\r\n# ]\r\n#\r\n# print(lst)\r\n# d = dict(lst)\r\n# print(d)\r\n\r\n# d = {i: i ** 2 for i in range(1, 7)}  # 1,2,3,4,5,6\r\n# print(d)\r\n#\r\n# for i in d:\r\n#     print(\"key =\", i, \"value =\", d[i])\r\n\r\n# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}\r\n# res = 1\r\n# for key in d:\r\n#     res *= d[key]\r\n#\r\n# print(res)\r\n\r\n# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}\r\n# print(d)\r\n# del d[\"x2\"]\r\n# print(d)\r\n\r\n# d = dict()\r\n# d[1] = input(\"-> \")\r\n# d[2] = input(\"-> \")\r\n# d[3] = input(\"-> \")\r\n# d[4] = input(\"-> \")\r\n# print(d)\r\n\r\n# d = {i: input(\"-> \") for i in range(1, 5)}\r\n# print(d)\r\n# dislike = int(input(\"Какой элемент исключить: \"))\r\n# del d[dislike]\r\n# print(d)\r\n\r\n# goods = {\r\n#     \"1\": ['Core-i3-4330', 9, 4500],\r\n#     \"2\": ['Core i5-4670K', 3, 8500],\r\n#     \"3\": ['AMD FX-6300', 6, 3700],\r\n#     \"4\": ['Pentium G3220', 8, 2100],\r\n#     \"5\": ['Core i5-4350', 5, 6500],\r\n# }\r\n#\r\n# for i in goods:\r\n#     print(i, \") \", goods[i][0], \" - \", goods[i][1], \" шт. по \", goods[i][2], \"руб\", sep=\"\")\r\n#\r\n# while True:\r\n#     n = input(\"№: \")\r\n#     if n == \"0\":\r\n#         break\r\n#     else:\r\n#         if n in goods:\r\n#             while True:\r\n#                 try:\r\n#                     count = int(input(\"Количество: \"))\r\n#                     goods[n][1] += count\r\n#                     break\r\n#                 except ValueError:\r\n#                     print(\"Значение некорректно. Введите число\")\r\n#         else:\r\n#             print(\"Такого ключа не существует\")\r\n#\r\n# for i in goods:\r\n#     print(i, \") \", goods[i][0], \" - \", goods[i][1], \" шт. по \", goods[i][2], \"руб\", sep=\"\")\r\n\r\n# print(dir(dict))\r\n\r\n\r\n# d = {1: \"one\", 2: \"two\", 3: \"three\"}\r\n# print(d.keys())\r\n# print(d.values())\r\n# print(d.items())\r\n#\r\n# for i, j in d.items():\r\n#     print(i, \":\", j)\r\n\r\n# d = {1: \"one\", 2: \"two\", 3: \"three\"}\r\n# d2 = d.copy()\r\n# print(\"D =\", d)\r\n# print(\"D2 =\", d2)\r\n#\r\n# d2[2] = \"four\"\r\n# print(\"D =\", d)\r\n# print(\"D2 =\", d2)\r\n\r\n\r\n# d = {1: \"one\", 2: \"two\", 3: \"three\"}\r\n# print(d)\r\n# # d.clear()\r\n# # item = d.pop(6, \"Такого ключа не существует\")\r\n# item = d.popitem()\r\n# print(d)\r\n# print(item)\r\n\r\n\r\n# d = {1: \"one\", 2: \"two\", 3: \"three\"}\r\n# # value = d[6]\r\n# # value = d.get(2, \"Такого ключа не существует\")\r\n# # print(value)\r\n# # item = d.setdefault(4, \"four\")\r\n# # print(d)\r\n# # print(item)\r\n#\r\n#\r\n#\r\n# sales_data = {'John': {'N': 3056, 'S': 8463, 'E': 8441, 'W': 2694},\r\n#               'Tom': {'N': 4832, 'S': 6786, 'E': 4737, 'W': 3612},\r\n#               'Anne': {'N': 5239, 'S': 4802, 'E': 5820, 'W': 1859},\r\n#               'Fiona': {'N': 3904, 'S': 3645, 'E': 8821, 'W': 2451}}\r\n\r\n# for x in sales_data:\r\n#     print(x)\r\n#     for y in sales_data[x]:\r\n#         print(\"\\t\", y, \":\", sales_data[x][y])\r\n\r\n# for x, y in sales_data.items():\r\n#     print(x)\r\n#     for i, j in y.items():\r\n#         print(\"\\t\", i, \":\", j)\r\n\r\n\r\n# #\r\n# # person = input(\"Имя: \")\r\n# # region = input(\"Регион: \")\r\n# # print(sales_data[person][region])\r\n# # new_data = int(input(\"Новое значение: \"))\r\n# # sales_data[person][region] = new_data\r\n# # print(sales_data[person])\r\n# # a = {10: \"A\", 20: \"B\", 2: \"C\"}\r\n# a = [(10, \"A\"), (20, \"B\"), (2, \"C\")]\r\n# # c = d | a\r\n# # print(c)\r\n# d.update(a)\r\n# print(d)\r\n\r\n# d = {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}\r\n#\r\n# new_d = dict()\r\n# # new_d['name'] = d.pop('name')\r\n# # new_d['salary'] = d.pop('salary')\r\n# new_d['name'], new_d['salary'] = d.pop('name'), d.pop('salary')\r\n# print(d)\r\n# print(new_d)\r\n\r\n# d = {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}\r\n#\r\n# d['location'] = d.pop('city')\r\n# print(d)\r\n\r\n\r\n# d = {'один': 1, \"два\": 2, \"три\": 3, \"четыре\": 4}\r\n# new_d = {value: key for key, value in d.items()}\r\n# print(d)\r\n# print(new_d)\r\n\r\n\r\n# d = {'один': 1, \"два\": 2, \"три\": 3, \"четыре\": 4}\r\n# new_d = {key: value for key, value in d.items() if value <= 2}\r\n# print(new_d)\r\n#\r\n# d = {i: i * 5 for i in [10, 20, 30, 40, 50]}\r\n# print(d)\r\n#\r\n# s = \"Hello\"\r\n# d1 = {key: key * 3 for key in s}\r\n# print(d1)\r\n\r\n# d = {'один': 1, \"два\": 2, \"три\": 3, \"четыре\": 4}\r\n#\r\n# print(list(d.values()))\r\n# print(list(d.keys()))\r\n# print(list(d.items()))\r\n\r\n\r\n# a = [\"one\", 1, 2, 3, \"two\", 10, 20, \"three\", 15, 36, 60, \"four\", -20]\r\n#\r\n# d = dict()  # {'one': [1, 2, 3], 'two': [10, 20], 'three': [], 'four': []}\r\n# s = None\r\n#\r\n# for i in a:  # 20\r\n#     if type(i) is str:\r\n#         d[i] = []\r\n#         s = i  # \"two\"\r\n#     else:\r\n#         d[s].append(i)\r\n#\r\n# print(d)\r\n\r\n# zip\r\n\r\n# d = dict(zip([1, 2, 3], ['one', 'two', 'three']))\r\n# print(d)\r\n\r\n# a = [1, 2, 3, 4]\r\n# b = ['one', 'two', 'three']\r\n# d = {v: k for k, v in zip(a, b)}\r\n# print(d)\r\n\r\n# one = {'name': 'Igor', 'surname': 'Pavlov', 'job': 'Consultant'}\r\n# two = {'name': 'Irina', 'surname': 'Vetrova', 'job': 'Manager'}\r\n# for (k1, v1), (k2, v2) in zip(one.items(), two.items()):\r\n#     print(k1, \"->\", v1)\r\n#     print(k2, \"->\", v2)\r\n\r\n# s = [(1, 'a'), (2, 'b'), (3, 'c')]\r\n# a, b = zip(*s)\r\n# print(a)\r\n# print(b)\r\n\r\n# letters = ['b', 'd', 'a', 'c']\r\n# numbers = [4, 1, 3, 2]\r\n# d = dict(zip(letters, numbers))\r\n# print(d)\r\n#\r\n# data1 = list(zip(letters, numbers))\r\n# print(data1)\r\n# data1.sort()\r\n# print(data1)\r\n# d2 = dict(data1)\r\n# print(d2)\r\n#\r\n# data2 = list(zip(numbers, letters))\r\n# print(data2)\r\n# data2.sort()\r\n# print(data2)\r\n# d3 = {v: k for k, v in data2}\r\n# print(d3)\r\n\r\n\r\n# letters = ['b', 'd', 'a', 'c']\r\n# numbers = [4, 1, 3, 2]\r\n#\r\n# data = sorted(zip(letters, numbers))\r\n# print(dict(data))\r\n\r\n\r\n# one = {'один': 1, \"два\": 2, \"четыре\": 8}\r\n# two = {\"три\": 3, \"четыре\": 4}\r\n#\r\n# print({**two, **one})   # {'один': 1, 'два': 2, 'три': 3, 'четыре': 4}\r\n# print(one | two)\r\n#\r\n# for k, v in {**one, **two}.items():\r\n#     print(k, \"->\", v)\r\n\r\n\r\n# colors = ['red', 'green', 'blue']\r\n# ind = 1\r\n# for color in colors:\r\n#     print(str(ind) + \"-й цвет: \" + color)\r\n#     ind += 1\r\n#\r\n# print()\r\n# for index, color in enumerate(colors, start=10):\r\n#     print(str(index) + \"-й цвет: \" + color)\r\n\r\n# d = {'один': 1, 'два': 2, 'три': 3, 'четыре': 4}\r\n#\r\n# for i, (k, v) in enumerate(d.items(), 1):\r\n#     print(i, \") \", k, \": \", v, sep=\"\")\r\n\r\n# a = [1, 2, 3]\r\n# b = [*a, 4, 5, 6]\r\n# print(b)\r\n\r\n# def func(*args):\r\n#     return args\r\n#\r\n#\r\n# print(func(5))\r\n# print(func(1, 2, 3, 'abc'))\r\n# print(func())\r\n\r\n\r\n# def summa(*params):\r\n#     res = 0\r\n#     for n in params:\r\n#         res += n\r\n#     return res\r\n#\r\n#\r\n# print(summa(1, 2, 3, 4, 5, 6, 7, 8, 9))\r\n# print(summa(7, 8, 9))\r\n\r\n\r\n# def to_dict(*args):\r\n#     return {i: i for i in args}\r\n#\r\n#\r\n# print(to_dict(1, 2, 3, 4))\r\n# print(to_dict(\"grey\", (2, 17), 3.11, -4))\r\n\r\n\r\n# def average(*args):\r\n#     sr = sum(args) / len(args)\r\n#     print(sr)\r\n#     res = []\r\n#     for num in args:\r\n#         if num < sr:\r\n#             res.append(num)\r\n#     return res\r\n#\r\n#\r\n# print(average(1, 2, 3, 4, 5, 6, 7, 8, 9))\r\n# print(average(3, 6, 1, 9, 5))\r\n\r\n# c = int(input(\"Введите количество элементов списка: \"))\r\n# a = {input(str(i) + \"-й студент: \"): int(input(\"Введите средний бал: \")) for i, _ in enumerate(range(c), 1)}\r\n# print(a)\r\n# ind = 1\r\n# for i in a:\r\n#     ind += 1\r\n# for ind, i in enumerate(a, 1):\r\n#     print(str(ind) + \"-й студент: \" + i, \"\\nБалл =\", a[i])\r\n\r\n# sr_bal = round(sum(a.values()) / c)\r\n# print('Средний бал: ', sr_bal, '\\nСтуденты с балом выше среднего: ')\r\n# # for i in a:\r\n# #     if a[i] > sr_bal:\r\n# #         print(i)\r\n#\r\n# for k, v in a.items():\r\n#     if v > sr_bal:\r\n#         print(k)\r\n\r\n# students = {}\r\n# c = int(input(\"Введите количество элементов списка: \"))\r\n# for i in range(c):\r\n#     name = input(str(i + 1) + \"-й студент: \")\r\n#     point = int(input(\"Балл: \"))\r\n#     students[name] = point\r\n#\r\n# sr_bal = round(sum(students.values()) / c)\r\n# print('Средний бал: ', sr_bal, '\\nСтуденты с балом выше среднего: ')\r\n#\r\n# for k, v in students.items():\r\n#     if v > sr_bal:\r\n#         print(k)\r\n\r\n\r\n# def func(a, b, *args):\r\n#     return a, b, args\r\n#\r\n#\r\n# print(func(5, 7))\r\n# print(func(1, 2, 3, 4, 5))\r\n\r\n\r\n# def scores(student, *score):\r\n#     print(\"Student Name:\", student)\r\n#     for i in score:\r\n#         print(i)\r\n#\r\n#\r\n# scores(\"Igor\", 100, 95, 88, 92, 99)\r\n# scores(\"Ivan\", 77, 32, 88)\r\n\r\n# def func(**kwargs):\r\n#     return kwargs\r\n#\r\n#\r\n# print(func(a=1, b=2, c=3))\r\n# print(func())\r\n# print(func(name=\"Irina\"))\r\n\r\n\r\n# def info(**data):\r\n#     for k, v in data.items():\r\n#         print(k, \":\", v)\r\n#     print()\r\n#\r\n#\r\n# info(name=\"Irina\", surname=\"Vetrova\", age=22)\r\n# info(name=\"Igor\", phone=\"987456\", email=\"igor@mail.ru\", age=22)\r\n\r\n# def db(**kwargs):\r\n#     my_dict.update(kwargs)\r\n#\r\n#\r\n# my_dict = {\"one\": \"first\"}\r\n# db(k1=22, k2=31, k3=11, k4=91)\r\n# db(name=\"bob\", age=31, weight=61, eyes_color='grey')\r\n# print(my_dict)\r\n\r\n\r\n# def func(a, *args, b=100, **kwargs):\r\n#     return kwargs, a, b, args\r\n#\r\n#\r\n# print(func(1, 2, 3, 4, 5, 6, c=55, d=66, b=20, e=77))\r\n\r\n\r\n# def func1(*args):\r\n#     print(args[0])\r\n#\r\n#\r\n# def func2(**kwargs):\r\n#     print(kwargs[\"one\"])\r\n#\r\n#\r\n# func1(1, 2, 3, 4, 5)\r\n# func2(one=123, two=456)\r\n\r\n\r\n# Области видимости (scope)\r\n\r\n# name = \"Tom\"  # глобальная область видимости\r\n#\r\n#\r\n# def hi():\r\n#     global name\r\n#     name = \"Sam\"\r\n#     surname = \"Jonson\"  # локальная область видимости\r\n#     print(\"Hello\", name, surname)\r\n#\r\n#\r\n# def bye():\r\n#     print(\"Good bye\", name)\r\n#\r\n#\r\n# # print(name)\r\n# hi()\r\n# bye()\r\n# print(name)\r\n\r\n\r\n# i = 5\r\n#\r\n#\r\n# def func(arg=i):\r\n#     print(arg)\r\n#\r\n#\r\n# i = 6\r\n# func()\r\n# print(i)\r\n\r\n\r\n# import builtins\r\n#\r\n# names = dir(builtins)\r\n#\r\n# for t in names:\r\n#     print(t)\r\n\r\n\r\n# print = 5\r\n#\r\n# lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n# print(max(lst))\r\n\r\n# x = 5\r\n#\r\n#\r\n# def add_two(a):\r\n#     x = 2  # 2\r\n#\r\n#     def add_some():\r\n#         x = 3\r\n#         print(\"x =\", x)  # 4\r\n#         return a + x  # 5\r\n#     print(\"x в наружной функции =\", x)\r\n#     return add_some()  # 3  6\r\n#\r\n#\r\n# print(add_two(3))  # 1  7\r\n\r\n\r\n# Вложенные функции\r\n\r\n# def outer(who):\r\n#     def inner():\r\n#         print(\"Hello,\", who)\r\n#\r\n#     inner()\r\n#\r\n#\r\n# outer(\"World\")\r\n\r\n\r\n# def outer():\r\n#     a = 6\r\n#\r\n#     def inner(b):\r\n#         a = 4\r\n#         print(\"Сумма:\", a + b)\r\n#\r\n#     print(\"a =\", a)\r\n#     inner(5)\r\n#\r\n#\r\n# outer()\r\n\r\n\r\n# x = 25\r\n#\r\n#\r\n# def fn():\r\n#     global t\r\n#     a = 30  # 35\r\n#\r\n#     def inner():\r\n#         nonlocal a\r\n#         a = 35\r\n#         # print(\"a =\", a)\r\n#\r\n#     inner()\r\n#     t = a\r\n#\r\n#\r\n# fn()\r\n# c = x + t  # 25 + 35\r\n# print(c)  # 60\r\n# x = 5\r\n#\r\n#\r\n# def fn1():\r\n#     x = 25  # 55\r\n#\r\n#     def fn2():\r\n#         x = 33  # 55\r\n#\r\n#         def fn3():\r\n#             nonlocal x\r\n#             x = 55\r\n#\r\n#         fn3()\r\n#         print(\"fn2.x =\", x)  # 33 -> 55\r\n#\r\n#     fn2()\r\n#     print(\"fn1.x =\", x)  # 25 -> 55\r\n#\r\n#\r\n# fn1()\r\n\r\n\r\n# def outer(a1, b1, a2, b2):\r\n#     a = 0\r\n#     b = 0\r\n#\r\n#     def inner():\r\n#         nonlocal a, b\r\n#         a = a1 + a2\r\n#         b = b1 + b2\r\n#         # print(a, b)\r\n#\r\n#     inner()\r\n#     return [a, b]\r\n#\r\n#\r\n# print(outer(2, 3, -1, 4))  # [1, 7]\r\n\r\n\r\n# def rect_paral(a, b, c):\r\n#     def inner(i, j):\r\n#         return i * j\r\n#\r\n#     s = 2 * (inner(a, b) + inner(a, c) + inner(b, c))\r\n#     return s\r\n#\r\n#\r\n# print(rect_paral(2, 4, 6))\r\n# print(rect_paral(5, 8, 2))\r\n# print(rect_paral(1, 6, 8))\r\n\r\n\r\n# def rect_paral(a, b, c):\r\n#     global s\r\n#\r\n#     def inner(i, j):\r\n#         return i * j\r\n#\r\n#     s = 2 * (inner(a, b) + inner(a, c) + inner(b, c))\r\n#\r\n#\r\n# s = 0\r\n# rect_paral(2, 4, 6)\r\n# print(s)\r\n# rect_paral(5, 8, 2)\r\n# print(s)\r\n# rect_paral(1, 6, 8)\r\n# print(s)\r\n\r\n# def rect_paral(a, b, c):\r\n#     s = 0\r\n#\r\n#     def inner(i, j):\r\n#         nonlocal s\r\n#         s += i * j\r\n#\r\n#     inner(a, b)\r\n#     inner(a, c)\r\n#     inner(b, c)\r\n#     return 2 * s\r\n#\r\n#\r\n# print(rect_paral(2, 4, 6))\r\n# print(rect_paral(5, 8, 2))\r\n# print(rect_paral(1, 6, 8))\r\n\r\n\r\n# Замыкание\r\n\r\n# def outer(n):\r\n#     def inner(x):\r\n#         return n + x\r\n#\r\n#     return inner\r\n#\r\n#\r\n# a = outer(5)\r\n# print(a(10))\r\n#\r\n# b = outer(6)\r\n# print(b(10))\r\n\r\n# c = outer(5)(10)\r\n# print(c)\r\n\r\n# def func1():\r\n#     a = 1\r\n#     b = \"line\"\r\n#     c = [1, 2, 3]\r\n#\r\n#     def func2():\r\n#         nonlocal a, b\r\n#         c.append(4)\r\n#         a = a + 1\r\n#         b = b + \"!\"\r\n#         return a, b, c\r\n#\r\n#     return func2\r\n\r\n\r\n# func = func1()\r\n# print(func())\r\n\r\n\r\n# def func(city):\r\n#     s = 0  # 1  # 1\r\n#\r\n#     def inner():\r\n#         nonlocal s\r\n#         s += 1\r\n#         print(city, s)\r\n#\r\n#     return inner\r\n#\r\n#\r\n# res1 = func(\"Москва\")\r\n# res1()\r\n# res1()\r\n#\r\n# res2 = func(\"Сочи\")\r\n# res2()\r\n# res2()\r\n#\r\n# res1()\r\n#\r\n# res2()\r\n# res2()\r\n# res2()\r\n# res2()\r\n# res2()\r\n\r\n\r\n# Анонимные функции (lambda)\r\n\r\n# def func(x, y):\r\n#     res = x + y\r\n#     return res\r\n#\r\n#\r\n# print(func(1, 2))\r\n#\r\n# print((lambda x, y: x + y)(1, 2))\r\n# print((lambda x, y: x + y)(\"a\", \"b\"))\r\n\r\n# func1 = lambda x, y: x + y\r\n#\r\n# print(func1(1, 2))\r\n# print(func1(5, 2))\r\n\r\n\r\n# print((lambda a, b, c: a + b + c)(10, 20, 30))\r\n# print((lambda a, b, c=3: a + b + c)(10, 20))\r\n# print((lambda a, b=2, c=3: a + b + c)(10))\r\n# print((lambda a=1, b=2, c=3: a + b + c)())\r\n# a = (lambda *args: sum(args))(1, 2, 3, 4, 5, 6, 7)\r\n# print(a)\r\n# print((lambda *args: sum(args))(6, 7))\r\n\r\n# print((lambda **kwargs: kwargs)(a=1, b=2, c=3))\r\n# print((lambda **kwargs: sum(kwargs.values()))(a=1, b=2, c=3))\r\n\r\n# c = (\r\n#     lambda x: x * 2,\r\n#     lambda x: x * 3,\r\n#     lambda x: x * 4,\r\n# )\r\n#\r\n# for t in c:\r\n#     print(t(\"abc__\"))\r\n\r\n\r\n# def outer(n):\r\n#     def inner(x):\r\n#         return x + n\r\n#\r\n#     return inner\r\n#\r\n#\r\n# f = outer(42)\r\n# print(f(3))\r\n#\r\n#\r\n# def outer(n):\r\n#     return lambda x: x + n\r\n#\r\n#\r\n# f = outer(42)\r\n# print(f(3))\r\n#\r\n# outer = lambda n: lambda x: x + n\r\n# f = outer(42)\r\n# print(f(3))\r\n#\r\n#\r\n# f = (lambda n: lambda x: x + n)(42)\r\n# print(f(3))\r\n#\r\n# print((lambda n: lambda x: x + n)(42)(3))\r\n#\r\n# res = (lambda n: lambda x: \"x > n\" if x > n else \"x < n\")(42)(3)\r\n# print(res)\r\n\r\n# print((lambda n: lambda x: lambda y: x + n + y)(2)(4)(6))\r\n\r\n# d = {'b': 10, 'a': 15, 'c': 4}\r\n# lst = list(d.items())\r\n# print(lst)\r\n# lst.sort(key=lambda i: i[1])\r\n# print(lst)\r\n# d2 = dict(lst)\r\n# print(d2)\r\n\r\n\r\n# def func(i):\r\n#     return i[1]\r\n#\r\n#\r\n# d = {'b': 10, 'a': 15, 'c': 4}\r\n# lst = list(d.items())\r\n# print(lst)\r\n# lst.sort(key=func)\r\n# print(lst)\r\n# d2 = dict(lst)\r\n# print(d2)\r\n\r\n# players = [\r\n#     {'name': \"Антон\", 'last name': 'Бирюков', 'rating': 9},\r\n#     {'name': \"Алексей\", 'last name': 'Бодня', 'rating': 10},\r\n#     {'name': \"Федор\", 'last name': 'Сидоров', 'rating': 4},\r\n#     {'name': \"Михаил\", 'last name': 'Семенов', 'rating': 6},\r\n# ]\r\n#\r\n# res1 = sorted(players, key=lambda item: item[\"last name\"])\r\n# print(res1)\r\n#\r\n# res2 = sorted(players, key=lambda item: item[\"rating\"], reverse=True)\r\n# print(res2)\r\n#\r\n# res3 = sorted(players, key=lambda item: item[\"rating\"])\r\n# print(res3)\r\n\r\n# lst = [lambda x, y: x + y, lambda x, y: x - y, lambda x, y: x * y, lambda x, y: x / y]\r\n#\r\n# print(lst[3](12, 2))\r\n\r\n# d = {\r\n#     1: lambda: print(\"Январь\"),\r\n#     2: lambda: print(\"Февраль\"),\r\n#     3: lambda: print(\"Март\"),\r\n#     4: lambda: print(\"Апрель\"),\r\n#     5: lambda: print(\"Май\"),\r\n#     6: lambda: print(\"Июнь\"),\r\n#     7: lambda: print(\"Июль\"),\r\n#     8: lambda: print(\"Август\"),\r\n#     9: lambda: print(\"Сентябрь\"),\r\n#     10: lambda: print(\"Октябрь\"),\r\n#     11: lambda: print(\"Ноябрь\"),\r\n#     12: lambda: print(\"Декабрь\")\r\n# }\r\n#\r\n# d[3]()\r\n\r\n# map()\r\n\r\n# def mult(t):\r\n#     return t * 2\r\n#\r\n#\r\n# lst = [2, 8, 12, -5, -10]\r\n#\r\n# print(list(map(mult, lst)))\r\n#\r\n# print(list(map(lambda t: t * 2, lst)))\r\n#\r\n# print(set(map(lambda t: t * 2, [2, 8, 12, -5, -10])))\r\n#\r\n# lst1 = [2, 8, 12, -5, -10]\r\n# lst2 = [8, -10, 12, 2, -5]\r\n#\r\n# print(dict(map(lambda x, y: (x, y), lst1, lst2)))\r\n# print(list(map(lambda x, y: [x, y], lst1, lst2)))\r\n\r\n\r\n# t = (2.88, -1.78, 100.55)\r\n#\r\n# print(tuple(map(lambda x: int(x), t)))\r\n# print(tuple(map(int, t)))\r\n\r\n# areas = [3.564789, 5.789456, 4.012456, 56.451266, 9.4567891, 32.45678912]\r\n# print(list(map(round, areas, range(1, 10))))\r\n\r\n# l1 = [1, 2, 3]\r\n# l2 = [4, 5, 6]\r\n#\r\n# print(list(map(lambda x, y: x + y, l1, l2)))\r\n\r\n\r\n# filter()\r\n\r\n# t = ('abcd', 'qwe', 'zxcvb', 'def', 'hjk')\r\n#\r\n# print(tuple(filter(lambda s: len(s) == 3, t)))\r\n\r\n# lst = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]\r\n# print(list(filter(lambda s: s > 75, lst)))\r\n\r\n# import random\r\n#\r\n# lst = [random.randint(0, 40) for i in range(10)]\r\n# print(lst)\r\n# # print(list(filter(lambda s: 10 <= s <= 20, lst)))\r\n# print(list(filter(lambda s: s in range(10, 21), lst)))\r\n\r\n# nums = [45, 55, 60, 37, 100, 105, 220]\r\n#\r\n# print(list(filter(lambda x: x % 15 == 0, nums)))\r\n# print(list(filter(lambda x: not x % 15, nums)))\r\n\r\n# print(list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(10)))))\r\n#\r\n# print([x ** 2 for x in range(10) if x % 2])\r\n\r\n\r\n# Декораторы\r\n\r\n# def hello():\r\n#     return \"Hello, I am func 'hello'\"\r\n#\r\n#\r\n# def super_func(func):\r\n#     print(\"Hello, I am func 'super_func'\")\r\n#     print(func())\r\n#\r\n#\r\n# super_func(hello)\r\n\r\n\r\n# def hello():\r\n#     return \"Hello, I am func 'hello'\"\r\n#\r\n#\r\n# text = hello\r\n# print(text())\r\n\r\n\r\n# def my_decorator(func):\r\n#     def inner():\r\n#         print(\"До кода\")\r\n#         func()\r\n#         print(\"После кода\")\r\n#     return inner\r\n#\r\n#\r\n# def func_test():\r\n#     print(\"Hello, I am func 'func_test'\")\r\n#\r\n#\r\n# test = my_decorator(func_test)\r\n# test()\r\n\r\n\r\n# def my_decorator(func):  # декорирующая функция\r\n#     def inner():\r\n#         print(\"-\" * 30)\r\n#         func()\r\n#         print(\"*\" * 30)\r\n#     return inner\r\n#\r\n#\r\n# @my_decorator  # декоратор\r\n# def func_test():  # декорируемая функция\r\n#     print(\"Hello, I am func 'func_test'\")\r\n#\r\n#\r\n# @my_decorator\r\n# def test():\r\n#     print(\"Hello, I am func 'test'\")\r\n#\r\n#\r\n# func_test()\r\n# test()\r\n\r\n\r\n# lst = [input(\"-> \") for i in range(5)]\r\n# print(lst)\r\n# num = list(map(int, lst))\r\n# print(num)\r\n\r\n# def circle(fn):\r\n#     def wrap():\r\n#         return \"(\" + fn() + \")\"\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# def angle(fn):\r\n#     def wrap():\r\n#         return \"<\" + fn() + \">\"\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# @angle\r\n# @circle\r\n# def expression():\r\n#     return '5 + 2'\r\n#\r\n#\r\n# print(expression())\r\n\r\n# def cnt(fn):\r\n#     count = 0\r\n#\r\n#     def wrap():\r\n#         nonlocal count\r\n#         count = count + 1\r\n#         fn()\r\n#         print(\"Вызов функции:\", count)\r\n#\r\n#     return wrap\r\n#\r\n#\r\n# @cnt\r\n# def hello():\r\n#     print(\"Hello\")\r\n#\r\n#\r\n# hello()\r\n# hello()\r\n# hello()\r\n\r\n\r\n# def outer(fn):\r\n#     def inner(arg1, arg2):\r\n#         print(\"Данные:\", arg1, arg2)\r\n#         fn(arg1, arg2)\r\n#\r\n#     return inner\r\n#\r\n#\r\n# @outer\r\n# def print_full_name(first, last):\r\n#     print(\"Меня зовут\", first, last)\r\n#\r\n#\r\n# print_full_name(\"Ирина\", \"Ветрова\")\r\n\r\n\r\n# def outer(fn):\r\n#     def inner(*args, **kwargs):\r\n#         print(\"args:\", args)\r\n#         print(\"kwargs\", kwargs)\r\n#         fn(*args, **kwargs)\r\n#\r\n#     return inner\r\n#\r\n#\r\n# @outer\r\n# def print_data(a, b, c, study=\"Python\"):\r\n#     print(a, b, c, \"изучают\", study, end=\"\\n\\n\")\r\n#\r\n#\r\n# print_data(\"Борис\", \"Елизавета\", \"Светлана\", study=\"JavaScript\")\r\n# print_data(\"Владимир\", \"Екатерина\", \"Виктор\")\r\n\r\n# def decor(args1, args2):\r\n#     def args_dec(fn):\r\n#         def wrap(x, y):\r\n#             print(args1, x, args2, y, \"=\", end=\" \")\r\n#             fn(x, y)\r\n#\r\n#         return wrap\r\n#     return args_dec\r\n#\r\n#\r\n# @decor(\"Сумма:\", \"+\")\r\n# def summa(a, b):\r\n#     print(a + b)\r\n#\r\n#\r\n# @decor(\"Разность:\", \"-\")\r\n# def sub(a, b):\r\n#     print(a - b)\r\n\r\n\r\n# summa(5, 2)\r\n# sub(5, 2)\r\n\r\n\r\n# def multiply(arg):\r\n#     def my_decorator(func):\r\n#         def wrap(*args, **kwargs):\r\n#             print(args)\r\n#             return arg * func(*args, **kwargs)\r\n#\r\n#         return wrap\r\n#     return my_decorator\r\n#\r\n#\r\n# @multiply(3)\r\n# def return_num(num):\r\n#     return num\r\n#\r\n#\r\n# print(return_num(5))\r\n\r\n# def typed(*args, **kwargs):\r\n#     def wrapper(fn):\r\n#         def wrap(*f_args, **f_kwargs):\r\n#             for i in range(len(args)):\r\n#                 if type(f_args[i]) is not args[i]:\r\n#                     raise TypeError(\"Неверный тип данных\")\r\n#             for k in kwargs:\r\n#                 if type(f_kwargs[k]) is not kwargs[k]:\r\n#                     raise TypeError(\"Неверный тип данных\")\r\n#             return fn(*f_args, **f_kwargs)\r\n#\r\n#         return wrap\r\n#\r\n#     return wrapper\r\n#\r\n#\r\n# @typed(int, int, int)\r\n# def typed_fn(x, y, z):\r\n#     return x * y * z\r\n#\r\n#\r\n# @typed(str, str, str)\r\n# def typed_fn2(x, y, z):\r\n#     return x + y + z\r\n#\r\n#\r\n# @typed(str, str, z=int)\r\n# def typed_fn3(x, y, z):\r\n#     return (x + y) * z\r\n#\r\n#\r\n# print(typed_fn(3, 4, 5))\r\n# # print(typed_fn(3, 4, \"Hello\"))\r\n# print(typed_fn2(\"Hello\", \"World\", \"!\"))\r\n# # print(typed_fn2(3, 4, 5))\r\n# print(typed_fn3(\"Hello\", \"World\", z=5))\r\n# print(typed_fn3(\"Hello\", \"World\", z=\"!\"))\r\n\r\n# Строки\r\n\r\n# print(bin(18))  # 0b10010 - двоичная система счисления\r\n# print(oct(18))  # 0o22 - восьмеричная система счисления\r\n# print(hex(18))  # 0x12 - шестнадцатеричная система счисления\r\n#\r\n# print(0b10010)\r\n# print(0o22)\r\n# print(0x12 + 0b10010 + 4)\r\n\r\n# q = \"Pyt\"\r\n# w = \"hon\"\r\n# e = q + w\r\n# print(e)\r\n# # print(e * 3)\r\n# # print(\"y\" in e)\r\n# # print(\"a\" in e)\r\n# # print(e[1])\r\n# print(e[::-1])\r\n\r\n# def change_char_to_str(s, old, new):\r\n#     s2 = \"\"\r\n#     i = 0\r\n#     while i < len(s):\r\n#         if s[i] == old:\r\n#             s2 += new\r\n#         else:\r\n#             s2 += s[i]\r\n#         i += 1\r\n#\r\n#     return s2\r\n#\r\n#\r\n# str1 = \"Я изучаю Nython. Мне нравится Nython. Nython очень интересный язык программирования\"\r\n# str2 = change_char_to_str(str1, \"N\", \"P\")\r\n# print(str1)\r\n# print(str2)\r\n\r\n# print(u\"Привет\")\r\n# print(\"Привет\")\r\n\r\n\r\n# print(\"C:\\\\file.txt\")\r\n# print(r\"C:\\file.txt\\\\\"[:-1])\r\n# print(r\"C:\\file.txt\" + \"\\\\\")\r\n# print(\"C:\\\\file.txt\\\\\")\r\n\r\n# print(b'1ab2c3')\r\n\r\n# name = \"Дмитрий\"\r\n# age = 25\r\n# print(f\"Меня зовут {name}. Мне {age} лет.\")\r\n\r\n# x = 10\r\n# y = 5\r\n# print(f\"{x=}, {y=}\")\r\n# print(\"x=\", x, \", y=\", y, sep=\"\")\r\n# print(f\"{round(10/7, 2)}\")\r\n# print(f\"{10/7:.3f}\")\r\n# num = 74\r\n# print(f\"{{{{{num}}}}}\")\r\n\r\n# dir_name = \"folder\"\r\n# file_name = \"file.txt\"\r\n# print(fr\"home\\{dir_name}\\{file_name}\")\r\n# print(\"home\\\\\" + dir_name + \"\\\\\" + file_name)\r\n\r\n\r\n# s = \"\"\"Многострочный\r\n#  те         кст\r\n# \"\"\"\r\n# print(s)\r\n# st = '''Много    строчный\r\n# текст\r\n# '''\r\n# print(st)\r\n\r\n\r\n# def square(n):\r\n#     \"\"\"Принимает число n, возвращает квадрат числа n\"\"\"\r\n#     res = n ** 2\r\n#     return res\r\n#\r\n#\r\n# print(square(5))\r\n# print(square.__doc__)\r\n# print(sum.__doc__)\r\n# print(min.__doc__)\r\n# print(len.__doc__)\r\n\r\n# from math import pi\r\n\r\n\r\n# def cylinder(r, h):\r\n#     \"\"\"\r\n#     Вычисляет площадь цилиндра.\r\n#\r\n#     Вычисляет площадь цилиндра на основании заданной высоты и радиуса основания.\r\n#     :param r: положительное число, радиус основания цилиндра\r\n#     :param h: положительное число, высота цилиндра\r\n#     :return: положительное число, площадь цилиндра\r\n#     \"\"\"\r\n#     return 2 * pi * r * (r + h)\r\n#\r\n#\r\n# print(cylinder(2, 4))\r\n# print(cylinder.__doc__)\r\n\r\n# print(ord('a'))\r\n# print(ord('а'))\r\n# print(ord('б'))\r\n\r\n\r\n# while True:\r\n#     n = input(\"-> \")\r\n#     if n != \"-1\":\r\n#         print(ord(n))\r\n#     else:\r\n#         break\r\n\r\n# st = \"Test string for me\"\r\n# arr = [ord(x) for x in st]\r\n# print(\"ASCII коды:\", arr)\r\n# arr = [int(sum(arr) / len(arr))] + arr\r\n# print(\"Среднее арифметическое:\", arr)\r\n# arr += [ord(x) for x in input(\"-> \")[:3] if ord(x) not in arr]\r\n# print(arr)\r\n# print(arr.count(arr[-1]) - 1)\r\n# arr.sort(reverse=True)\r\n# print(arr)\r\n\r\n# print(chr(97))\r\n# print(chr(35))\r\n# print(chr(8364))\r\n\r\n# a = 122\r\n# b = 97\r\n#\r\n# if a > b:\r\n#     for i in range(b, a + 1):\r\n#         print(chr(i), end=\" \")\r\n# else:\r\n#     for i in range(a, b + 1):\r\n#         print(chr(i), end=\" \")\r\n\r\n\r\n# print(\"apple\" > \"Apple\")\r\n# print(ord(\"a\"))\r\n# print(ord(\"A\"))\r\n\r\n\r\n# from random import randint\r\n#\r\n# SHORT = 8\r\n# LONG = 16\r\n# MIN_ASCII = 33\r\n# MAX_ASCII = 123\r\n#\r\n#\r\n# def random_password():\r\n#     rand_len = randint(SHORT, LONG)\r\n#     result = \"\"\r\n#     for i in range(rand_len):\r\n#         result += chr(randint(MIN_ASCII, MAX_ASCII))\r\n#     return result\r\n\r\n\r\n# print(\"Случайный пароль:\", random_password())\r\n\r\n\r\n# print(dir(str))\r\n\r\n# s = \"hello, WORLD! I am learning Python.\"\r\n# print(s.capitalize())  # Первый символ в строке в верхнем регистре, остальные в нижнем\r\n# print(s.lower())  # все символы в нижнем регистре\r\n# print(s.upper())  # все символы в верхнем регистре\r\n# print(s.swapcase())  # инвертирование регистра символов\r\n# print(s.title())  # первая буква каждого слова в верхнем регистре\r\n# print(s.count(\"h\", 1, -4))  # подсчет кол-ва заданных символов\r\n# print(s.lower().count(\"i\"))\r\n# print(s.find(\"Python\"))  # возвращает первый индекс подстроки\r\n# print(s.find(\"h\", 1, -4))  # если вхождение не найдено, то возвращается \"-1\"\r\n# print(s.index(\"Python\"))  # возвращает первый индекс подстроки\r\n# print(s.index(\"h\", 1, -4))  # если вхождение не найдено, то возвращается исключение ValueError\r\n# st = \"один два\"\r\n# st = \"Hello World\"\r\n# one = st[:st.find(\" \")]\r\n# two = st[st.find(\" \") + 1:]\r\n# print(two + \" \" + one)\r\n\r\n\r\n# print(s.rfind(\"h\", 1, -4))  # возвращает последний индекс подстроки, если вхождение не найдено, то возвращается \"-1\"\r\n# print(s.rindex(\"h\", 1, -4))  # возвращает последний индекс подстроки, если вхождение не найдено,\r\n# то возвращается исключение ValueError\r\n\r\n# st = \"I am learning Python. hello, WORLD!\"\r\n# print(st[:st.find('h')] + st[st.rfind(\"h\") + 1:])\r\n\r\n# print(s.startswith(\"he\"))  # возвращает True, если строка начинается с заданной подстроки\r\n# print(s.startswith(\"I am\", 14))\r\n# print(s.find(\"I am\"))\r\n#\r\n# print(s.endswith(\"Python\"))  # возвращает True, если строка заканчивается заданной подстрокой\r\n\r\n# print('Фbc123'.isalnum())  # определяет состоит ли строка из букв и цифр\r\n# print('abc%123'.isalnum())\r\n# print(''.isalnum())\r\n#\r\n# print(\"ABCsvb\".isalpha())  # определяет состоит ли строка из букв\r\n# print(\"ABCsvb!\".isalpha())\r\n#\r\n# print(\"45678\".isdigit())  # определяет состоит ли строка из цифр\r\n\r\n# print(\"abc\".islower())  # определяет состоит ли строка из букв в нижнем регистре,\r\n# # допускается наличие любых других символов\r\n# print(\"Abc\".islower())\r\n# print(\"@#$$a23123\".islower())\r\n#\r\n# print(\"ABC\".isupper())  # определяет состоит ли строка из букв в верхнем регистре,\r\n# # допускается наличие любых других символов\r\n# print(\"#$$ABC2123\".isupper())\r\n\r\n# print('py'.center(10))  # выравниваем строку по центру\r\n# print('py'.center(10, \"-\"))\r\n# print('py'.center(1))\r\n\r\n\r\n# print(\"    py\".lstrip())  # удалит пробелы слева\r\n# print(\"py    \".rstrip())  # удалит пробелы справа\r\n# print(\"   py   \".strip())  # удалит пробелы слева и справа\r\n#\r\n# print(\"https://.python.org\".lstrip(\"htps:/\"))\r\n# print(\"https://.python.org\".rstrip(\"org.\"))\r\n# print(\"https://.python.org\".strip(\"htps:/org.\"))\r\n#\r\n# print(\"https://.python.org\".lstrip(\"htps:/\").rstrip(\"org.\"))\r\n\r\n\r\n# str1 = \"Я изучаю Nython. Мне нравится Nython. Nython очень интересный язык программирования\"\r\n# print(str1.replace(\"Nython\", \"Python\", 2))  # поиск и замена\r\n\r\n\r\n# st = \"-\"\r\n# seq = (\"a\", \"b\", \"c\")\r\n# print(st.join(seq))  # объединяет итерируемую последовательность в строку\r\n#\r\n# print(\"..\".join(['1', '99']))\r\n# print(\":\".join(\"abc\"))\r\n# print(\":\".join(\"a\"))\r\n\r\n\r\n# print(\"Строка разделенная пробелами\".split())  # строку преобразовывает в список по символу разделителю\r\n# print(\"www.python.org\".split(\".\"))\r\n# print(\"www.python.org.ru\".split(\".\", 2))\r\n#\r\n#\r\n# print(\"www.python.org\".rsplit(\".\"))\r\n# print(\"www.python.org.ru\".rsplit(\".\", 2))\r\n\r\n\r\n# st = \"Никонов Валерий Анатольевич\"\r\n# st = input(\"Введите ФИО: \").split()\r\n# print(st)\r\n# print(f\"{st[0]} {st[1][0]}. {st[2][0]}.\")\r\n\r\n\r\n# num = input(\"Введите числа через пробел: \").split()\r\n# print(num)\r\n# num = list(map(float, num))\r\n# print(num)\r\n# print(sum(num))\r\n\r\n# s = \"I am learning Python. hello, WORLD!\"\r\n# a = s[:s.find(\"h\")]\r\n# b = s[s.find(\"h\"):s.rfind(\"h\") + 1]\r\n# c = s[s.rfind(\"h\") + 1:]\r\n# print(a + b[::-1] + c)\r\n\r\n# Регулярные выражения\r\n\r\n# import re\r\n# from itertools import count\r\n\r\n# s = \"Я ищу совпадения в 2025 году. И я их найду в 2 счёта. 6789. [Hel-lo] Wor_ld 2000000000000000000\"\r\n# reg = r\"\\.\"\r\n# print(re.findall(reg, s))  # список, содержащий все совпадения\r\n# print(re.search(reg, s))  # месторасположение первого совпадения объекта\r\n# # print(re.search(reg, s).span())\r\n# # print(re.search(reg, s).start())\r\n# # print(re.search(reg, s).end())\r\n# # print(re.search(reg, s).group())\r\n# print(re.match(reg, s))  # поиск совпадения только с начала строки\r\n# print(re.split(reg, s))  # список, в котором строка разбита по заданном шаблону\r\n# print(re.sub(reg, \"!\", s))  # поиск и замена\r\n\r\n# print(dir(re))\r\n# reg = r\"[205]\"\r\n# reg = r\"[0-9]\"\r\n# reg = r\"[6-9]\"\r\n# reg = r\"[12][0-9][0-9][0-9]\"\r\n# reg = r\"[А-яЁё]\"\r\n# reg = r\"[а-яА-ЯЁё]\"\r\n\r\n# reg = r\"[A-Za-z\\]\\[-]\"\r\n# reg = r\"[^0-9]\"\r\n# reg = r\"[0-9].\"\r\n# reg = r\"[0-9]...\"\r\n# reg = r\"\\d\"\r\n# reg = r\"\\D\"\r\n# reg = r\"\\s\"\r\n# reg = r\"\\S\"\r\n# reg = r\"\\S\"\r\n# reg = r\"\\w\"\r\n# reg = r\"\\W\"\r\n# reg = r\"\\AЯ ищу\"\r\n# reg = r\"Wor_ld\\Z\"\r\n# reg = r\"сов\\B\"\r\n# reg = r\"\\w+\"\r\n# reg = r\"\\d+\"\r\n# reg = r\"20*\"\r\n# print(re.findall(reg, s))\r\n\r\n# Кол-во повторений\r\n# + - от 1 до бесконечности\r\n# * - от 0 до бесконечности\r\n# ? - от 0 до 1 повторения\r\n\r\n\r\n# st = \"Час в 24-часовом формате от 00 до 23. 2021-06-15T18:55. Минуты, в диапазоне от 00 до 59. 2021-06-15T01:09.\"\r\n# reg = \"[0-2][0-9]:[0-5][0-9]\"\r\n# print(re.findall(reg, st))\r\n\r\n# d = \"Цифры: 7, +17, -24, 0013, 0.3\"\r\n# reg = r\"[+-]?[\\d.]+\"\r\n# print(re.findall(reg, d))\r\n\r\n# d = \"05-03-1987  # Дата рождения\"\r\n#\r\n# print(\"Дата рождения:\", re.sub(r\"\\s\\s#.+\", \"\", d))\r\n#\r\n# print(re.sub(\"-\", \".\", d))\r\n#\r\n# print(\"Дата рождения:\", re.sub(r\"\\s\\s#.+\", \"\", re.sub(\"-\", \".\", d)))\r\n\r\n# st = \"author=Пушкин А.С.; title  = Евгений Онегин; price =200; year= 1831\"\r\n# # reg = r\"\\w+\\s*=\\s*\\w+\\s*\\w+\\.?\\w?\\.?\"\r\n# # reg = r\"\\w+\\s*=[\\w\\s.]*\"\r\n# reg = r\"\\w+\\s*=[^;]+\"\r\n# print(re.findall(reg, st))\r\n#\r\n# reg1 = r\";\\s\"\r\n# print(re.split(reg1, st))\r\n\r\n# st = \"12 сентября 2025 года  456789456\"\r\n# # reg = r\"\\d{4}\"\r\n# reg = r\"\\d{2,4}\"\r\n# # reg = r\"\\d{4,}\"\r\n# print(re.findall(reg, st))\r\n\r\n# st = \"+7 499 456-45-78, +74994564578, +7 (499) 456 45 78, 74994564578\"\r\n# reg = r\"\\+?7\\d{10}\"\r\n# print(re.findall(reg, st))\r\n\r\n\r\n# s = \"Я ищу совпадения в 2025 году. И я их найду в 2 счёта. 6789. [Hel-lo] Wor_ld 2000000000000000000\"\r\n# # reg = r\"^\\w+\\s\\w+\"\r\n# reg = r\"\\w+\\s\\w+$\"\r\n# print(re.findall(reg, s))\r\n\r\n\r\n# def validate_login(login):\r\n#     return re.findall(r\"^[A-Za-z0-9_-]{3,16}$\", login)\r\n#\r\n#\r\n# print(validate_login(\"Python_master\"))\r\n# print(validate_login(\"P0012yt\"))\r\n\r\n\r\n# text = \"<body>Примет жадного совпадения соответствия регулярных выражений</body>\"\r\n# print(re.findall(\"<.*?>\", text))\r\n\r\n# *?, +?, ??\r\n# {m,n}?, {,n}?, {m,}?\r\n\r\n\r\n# st = \"Петр, Ольга и Виталий отлично учатся!\"\r\n# reg = r\"Петр|Ольга|Виталий|Наталья\"\r\n# print(re.findall(reg, st))\r\n\r\n# st = \"int = 4, float = 4.0f, double = 8.0, int\"\r\n# # reg = r\"\\w+\\s*=\\s*\\d[.\\w+]*\"\r\n# # reg = r\"int\\s*=\\s*\\d[.\\w+]*|float\\s*=\\s*\\d[.\\w+]*\"\r\n# # reg = r\"(?:int|float)\\s*=\\s*\\d[.\\w+]*\"\r\n# reg = r\"((int|float)\\s*=\\s*(\\d[.\\w+]*))\"\r\n# print(re.findall(reg, st))\r\n\r\n# d = \"Word2016, PS6, AI5\"\r\n# reg = r\"([A-Za-z]+)\\d+\"\r\n# # reg = r\"[A-Za-z]+(\\d+)\"\r\n# print(re.findall(reg, d))\r\n# print(re.search(reg, d))\r\n\r\n\r\n# st = \"5 + 7*2 - 4\"\r\n# # reg = r\"\\s*[+*-]\\s*\"\r\n# reg = r\"\\s*([+*-])\\s*\"\r\n# print(re.split(reg, st))\r\n\r\n# s = \"Я ищу совпадения в 2025 году. И я их найду в 2 счёта.\"\r\n# reg = r\"([0-9]+)\\s(\\D+)\"\r\n# print(re.search(reg, s).group(1))\r\n# m = re.search(reg, s)\r\n# print(m[0])\r\n# print(m[1])\r\n# print(m[2])\r\n\r\n\r\n# s = \"Самолет прилетает 10/23/2025. Будем рады вас видеть после 10/24/2025.\"\r\n# reg = r\"(\\d{2})/(\\d{2})/(\\d{4})\"\r\n# print(re.sub(reg, r\"\\2.\\1.\\3\", s))\r\n\r\n\r\n# s = \"yandex.com and yandex.ru\"\r\n# reg = r\"(([a-z0-9-]{2,}\\.)+[a-z]{2,4})\"\r\n# print(re.sub(reg, r\"http://\\1\", s))\r\n\r\n\r\n# s = \"25-12-2021\"  # 1900 - 2000\r\n# reg = r\"^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(19[0-9][0-9]|20[0-9][0-9])$\"\r\n# print(re.findall(reg, s))\r\n\r\n\r\n# print(re.findall(r\"\\w+\", \"12 + й\"))\r\n# print(re.findall(r\"\\w+\", \"12 + й\", flags=re.ASCII))\r\n\r\n# text = \"hello world\"\r\n# print(re.findall(r\"\\w\\+\", text))\r\n# print(re.findall(r\"\\w\\+\", text, re.DEBUG))\r\n\r\n# text = \"helLo worLd\"\r\n# reg = \"l\"\r\n# print(re.findall(reg, text, re.IGNORECASE))\r\n\r\n# text = \"\"\"\r\n# one\r\n# two\r\n# \"\"\"\r\n#\r\n# # print(re.findall(r\"one.\\w+\", text))\r\n# # print(re.findall(r\"one.\\w+\", text, re.DOTALL))\r\n#\r\n# print(re.findall(r\"one$\", text))\r\n# print(re.findall(r\"one$\", text, re.MULTILINE))\r\n\r\n\r\n# print(re.findall(\"\"\"\r\n# [a-z.-]+    # part 1\r\n# @           # @\r\n# [a-z.] +    # part 2\r\n# \"\"\", \"test@mail.ru\", re.VERBOSE))\r\n\r\n\r\n# text = \"\"\"Python,\r\n# python,\r\n# PYTHON\"\"\"\r\n# reg = \"(?im)^python\"\r\n# print(re.findall(reg, text))\r\n\r\n# Рекурсия\r\n\r\n# def elevator(n):  # 5\r\n#     if n == 0:  # базовый случай\r\n#         print(\"Вы в подвале\")\r\n#         return\r\n#     # print(\"=>\", n)\r\n#     elevator(n - 1)  # 5 4 3 2 1\r\n#     print(n, end=\" \")\r\n#\r\n#\r\n# n1 = int(input(\"На каком этаже вы находитесь: \"))\r\n# elevator(n1)\r\n\r\n\r\n# def sum_list(lst):\r\n#     res = 0\r\n#     for i in lst:\r\n#         res += i\r\n#     return res\r\n#\r\n#\r\n# # def sum_list(lst):  # [9]\r\n# #     if len(lst) == 1:\r\n# #         print(lst, \"=> lst[0]:\", lst[0])\r\n# #         return lst[0]  # 9\r\n# #     else:\r\n# #         print(lst, \"=> lst[0]:\", lst[0])\r\n# #         return lst[0] + sum_list(lst[1:])  # 1 + 3 + 5 + 7\r\n# #\r\n# #\r\n# print(sum_list([1, 3, 5, 7, 9]))\r\n\r\n\r\n# def to_str(n, base):  # 15, 16\r\n#     convert = \"0123456789ABCDEF\"\r\n#     if n < base:\r\n#         return convert[n]  # \"F\"\r\n#     else:\r\n#         return to_str(n // base, base) + convert[n % base]  # to_str(254 // 16, 16) + 'E'\r\n#\r\n#\r\n# print(to_str(254, 16))\r\n\r\n\r\n# names = [\"Adam\", [\"Bob\", [\"Chet\", \"Cat\"], \"Barb\", \"Berb\"], \"Alex\", [\"Bea\", \"Bill\"], \"Ann\"]\r\n# print(len(names))\r\n# print(names[0])\r\n# print(isinstance(names[0], list))\r\n# print(names[1])\r\n# print(isinstance(names[1], list))\r\n# print(names[1][1])\r\n# print(isinstance(names[1][1], list))\r\n# print(names[1][1][0])\r\n# print(isinstance(names[1][1][0], list))\r\n\r\n# names = [\"Adam\", [\"Bob\", [\"Chet\", \"Cat\"], \"Barb\", \"Berb\"], \"Alex\", [\"Bea\", \"Bill\"], \"Ann\"]\r\n#\r\n#\r\n# def count_items(item_list):  # [\"Adam\", [\"Bob\", [\"Chet\", \"Cat\"], \"Barb\", \"Berb\"], \"Alex\", [\"Bea\", \"Bill\"], ]\r\n#     count = 0  # 10\r\n#     for item in item_list:  # \"Ann\"\r\n#         if isinstance(item, list):\r\n#             count += count_items(item)\r\n#         else:\r\n#             count += 1\r\n#     return count\r\n#\r\n#\r\n# print(count_items(names))\r\n\r\n\r\n# Файлы\r\n\r\n# f = open(\"text.txt\", 'r')\r\n# # f = open(r\"E:\\Python522\\text.txt\", 'r')\r\n# print(f)\r\n# print(*f)\r\n# f.close()\r\n# print(f.closed)\r\n# print(f.mode)\r\n# print(f.name)\r\n# print(f.encoding)\r\n\r\n# f = open(\"text.txt\", 'r')\r\n# print(f.read(3))\r\n# print(f.read())\r\n# f.close()\r\n\r\n\r\n# f = open(\"xyz.txt\", \"w\")\r\n# f.write(\"This is line1.\\nThis is line2.\\nThis is line3.\\n\")\r\n# f.close()\r\n\r\n\r\n# f = open(\"xyz.txt\")\r\n# # print(f.read())\r\n#\r\n# # print(f.readline())\r\n# # print(f.readline(8))\r\n# # print(f.readline())\r\n# # print(f.readline())\r\n#\r\n# print(f.readlines(26))\r\n# print(f.readlines())\r\n# f.close()\r\n\r\n\r\n# f = open(\"xyz.txt\")\r\n# for line in f:\r\n#     print(line)\r\n# f.close()\r\n\r\n# count = 0\r\n#\r\n# f = open(\"xyz.txt\")\r\n# for line in f:\r\n#     print(line)\r\n#     count += 1\r\n# f.close()\r\n#\r\n# print(count)\r\n\r\n\r\n# f = open(\"xyz.txt\")\r\n# print(len(f.readlines()))\r\n# f.close()\r\n\r\n\r\n# f = open(\"test.txt\", \"w\")\r\n# f.write(\"Hello\\nWorld\\n\")\r\n# f.close()\r\n#\r\n# f = open(\"test.txt\", \"a\")\r\n# f.write(\"New text\")\r\n# f.close()\r\n\r\n# lines = [\"This is line1. \", \"This is line2.\\n\", \"This is line3.\"]\r\n#\r\n# f = open(\"test1.txt\", \"a\")\r\n# # f.write(\"New text\")\r\n# f.writelines(lines)\r\n# f.close()\r\n\r\n# def negative_numbers(n):  # []\r\n#     if len(n) == 0:  # if not n:\r\n#         return 0\r\n#     count = 0  # 1 0 0 1 1 0\r\n#     if n[0] < 0:\r\n#         count += 1\r\n#     return count + negative_numbers(n[1:])  # count + 0\r\n#\r\n#\r\n# lst = [-2, 3, 8, -11, -4, 6]\r\n# print(negative_numbers(lst))\r\n\r\n# file = \"text2.txt\"\r\n# f = open(file, \"w\")\r\n# f.write(\"Замена строки в текстовом файле;\\n\"\r\n#         \"изменить строку в списке;\\n\"\r\n#         \"записать список в файл;\\n\")\r\n# f.close()\r\n\r\n# f = open(file)\r\n# data = f.readlines()\r\n# print(data)\r\n# data[1] = \"Hello World!\\n\"\r\n# print(data)\r\n# f.close()\r\n#\r\n# f = open(file, \"w\")\r\n# f.writelines(data)\r\n# f.close()\r\n\r\n\r\n# f = open('text3.txt', 'w')\r\n# lst = [str(i) for i in range(1, 100, 5)]\r\n# print(lst)\r\n# for index in lst:\r\n#     f.write(index + \"\\t\")\r\n# f.close()\r\n\r\n# f = open(\"text.txt\")\r\n# print(f.read(3))\r\n# print(f.tell())  # возвращает текущую позицию условного курсора в файле\r\n# print(f.seek(1))   # перемещает уловный курсор в заданную позицию\r\n# print(f.read())\r\n# print(f.tell())\r\n# f.close()\r\n\r\n# f = open(\"text.txt\", \"r+\")\r\n# print(f.write(\"I am learning Python\"))\r\n# print(f.seek(3))\r\n# print(f.write(\"-new string-\"))\r\n# print(f.tell())\r\n# f.close()\r\n\r\n\r\n# f = open(\"text.txt\", \"a+\")\r\n# print(f.read())\r\n# f.close()\r\n\r\n\r\n# with open(\"text.txt\", \"w\") as f:\r\n#     print(f.write(\"0123456789\"))\r\n# print(f.closed)\r\n#\r\n# with open(\"text.txt\") as f:\r\n#     print(f.read())\r\n\r\n# lst = [4.5, 2.8, 3.9, 1.0, 0.3, 4.33, 5.47]\r\n#\r\n#\r\n# def get_line(lt):\r\n#     lt = list(map(str, lt))  # ['4.5', '2.8', '3.9', '1.0', '0.3', '4.33', '5.47']\r\n#     return \" \".join(lt)\r\n#\r\n#\r\n# with open(\"res.txt\", \"w\") as f:\r\n#     f.write(get_line(lst))\r\n#\r\n# print(\"Файл записан\")\r\n\r\n\r\n# with open(\"res.txt\") as f:\r\n#     nums = f.read()\r\n#\r\n# print(nums)\r\n#\r\n# lst = list(map(float, nums.split()))\r\n# print(lst)\r\n# print(sum(lst))\r\n\r\n# file_name = \"long.txt\"\r\n#\r\n# with open(file_name, \"w\") as f:\r\n#     f.write(\"Файл — именованная область данных на носителе информации, используемая как базовый объект\"\r\n#             \" с данными в операционных системах.\")  # взаимодействия\r\n#\r\n#\r\n# def longest_world(file):\r\n#     with open(file) as text:\r\n#         lst = text.read().split()\r\n#         print(lst)\r\n#         max_length = len(max(lst, key=len))\r\n#         print(max_length)\r\n#         res = [word for word in lst if len(word) == max_length]\r\n#         return res[0] if len(res) == 1 else res\r\n#\r\n#\r\n# print(longest_world(file_name))\r\n\r\n# text = \"Строка №1\\nСтрока №2\\nСтрока №3\\nСтрока №4\\nСтрока №5\\nСтрока №6\\nСтрока №7\\nСтрока №8\\nСтрока №9\\nСтрока №10\\n\"\r\n# with open(\"one.txt\", \"w\") as f:\r\n#     f.write(text)\r\n#\r\n# with open(\"one.txt\", \"r\") as fr, open(\"two.txt\", \"w\") as fw:\r\n#     for line in fr:\r\n#         line = line.replace(\"Строка\", \"Линия -\")\r\n#         fw.write(line)\r\n\r\n# Модули OS и OS.PATH\r\n\r\n# import os\r\n\r\n# print(os.getcwd())  # путь к текущей директории\r\n#\r\n# print(os.listdir())  # список директорий и файлов\r\n# print(os.listdir(\".venv\"))\r\n\r\n# os.mkdir(\"folder\")  # создали папку\r\n# os.rmdir(\"folder\")  # удалили папку\r\n\r\n# os.makedirs(\"nested1/nested2/nested3\")  # создается папка с промежуточными директориями\r\n# os.remove(\"xyz.txt\")  # удалить файл\r\n\r\n# os.rename(\"file_name\", \"file_name.txt\")\r\n# os.rename(\"file_name.txt\", \"new_file.txt\")\r\n# os.rename(\"new_file.txt\", \"nested1/new_file.txt\")  # переименовывает файл,\r\n# может его перемещать в существующую директорию\r\n# os.renames(\"two.txt\", \"test/two.txt\")  # переименовывает файл,\r\n# может создавать директории, которых не существует при перемещении\r\n\r\n# for root, dirs, files in os.walk(\"nested1\", topdown=False):\r\n#     print(\"Root:\", root)\r\n#     print(\"\\tDirs:\", dirs)\r\n#     print(\"\\t\\tFiles:\", files)\r\n\r\n\r\n# def remove_empty_dirs(root_tree):\r\n#     for root, dirs, files in os.walk(root_tree):\r\n#         if not os.listdir(root):\r\n#             os.rmdir(root)\r\n#             print(f\"Директория {root} удалена.\")\r\n#\r\n#\r\n# remove_empty_dirs(\"nested1\")\r\n\r\n# import os\r\n# # import os.path\r\n#\r\n# print(os.path.split(r\"E:\\Python522\\nested1\\nested2\\nested3\\text3.txt\"))\r\n# print(os.path.join(\"nested1\", r\"E:\\Python522\", \"nested2\", \"nested3\", \"text3.txt\"))\r\n# print(os.path.exists(r\"E:\\Python522\\nested2\\nested3\\text3.txt\"))\r\n# print(os.path.exists(r\"E:\\Python522\\nested1\\nested2\\nested3\\text3.txt\"))\r\n# print(os.path.isfile(r\"E:\\Python522\\nested1\\nested2\\nested3\\text3.txt\"))\r\n# print(os.path.isdir(r\"E:\\Python522\\nested1\\nested2\\nested3\"))\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main6.py b/main6.py
--- a/main6.py	(revision 413633cabfaf2ace3be119f48ae421a35d7fde21)
+++ b/main6.py	(date 1743830636369)
@@ -3563,3 +3563,202 @@
 # print(os.path.isfile(r"E:\Python522\nested1\nested2\nested3\text3.txt"))
 # print(os.path.isdir(r"E:\Python522\nested1\nested2\nested3"))
 
+# import os
+# from pydoc_data.topics import topics
+# from tkinter.font import names
+
+
+# dirs = ["Work/F1", r"Work/F2/F21"]
+
+# for d in dirs:
+#     os.makedirs(d)
+# #
+# files = {
+#     "Work": ["w.txt"],
+#     r"Work\F1": ["f1.txt", 'f12.txt', 'f13.txt'],
+#     r"Work\F2\F21": ["f211.txt", "f2121.txt"]
+#
+# }
+#
+# # for key, value in files.items():
+# #     for file in value:
+# #         file_path = os.path.join(key, file)
+# #         open(file_path,"w").close()
+#
+# file_with_text= [r'Work\w.txt',r'Work\F1\f12']
+#
+# for file in file_with_text:
+#     with open(file,'w') as f:
+#         f.write(f"Текст для файла ")
+
+# def print_tree(topdown):
+#     print(f"Обход {'сверху вниз' if topdown else "снизу вверх"}')
+
+# class Point:
+#     x = 1
+#     y = 2
+#
+#
+# p1 = Point()
+# p1.x = 100
+# print(p1.x)
+# print(Point.x)
+
+# class Human:
+#     name = "name"
+#     birthday = "00.00.0000"
+#     phone = "00-00-00"
+#     country = "country"
+#     city = "city"
+#     address="steet, house"
+#
+#     def print_info(self):
+#         print(" Данные ".center(40,"*"))
+#         print(f"Имя:{self.name}\nДата рождения:{self.birthday}\n"
+#               f"Номер телефона {self.phone}\n"
+#               f"Страна: {self.country}\n"
+#               f"Город:{self.city}\n"
+#               f"Домашний адрес:{self.address}")
+#
+#     def input_info(self,first_name, birthday, phone,country,city,address):
+#         self.phone=phone
+#
+#         print("="*40)
+# h1= Human()
+# h1.print_info()
+# h1.input_info("Юлия", '23.05.1986','45-44-98','Россия',"Москва",
+#               "Чистопрудный бульвар")
+# h1.print_info()
+
+#
+# class Person:
+#     skill= 10
+#     name = ""
+#     surname = ""
+#     def print_info(self,name,surname):
+#         self.name= name
+#         self.surname = surname
+#         print("Данные : ",self.name,self.surname)
+#     def add_skill(self,k):
+#         self.skill += k
+#         print("Квалификация ", self.skill,"\n")
+#
+# p1= Person()
+# p1.print_info("Виктор","Резник")
+# p1.add_skill(3)
+#
+# p2 = Person()
+# p2.print_info("Анна",'Долгих')
+# p2.add_skill(2)
+
+# class Point:
+#     def __init__(self, x, y):
+#         self.__x = x
+#         self.__y = y
+#
+#
+# p1 = Point(5, 10)
+# # print(p1.__x, p1.__y)
+# # p1.z=20
+# p1.__x = 100
+# p1.__y = "abc"
+# print(p1.__x,p1.__y)
+# print(p1.__dict__)
+
+
+# class Rectangle:
+#     def __init__(self, length=1, width=1):
+#         self.__length = length
+#         self.__width = width
+#
+#     def __check_valus(c)
+#         if isinstance(c, int) or isinstance(c, float):
+#             return True
+#         return False
+#
+#     def get_width(self):
+#         return self.__width
+#
+#     def get_length(self)
+#         return self.__length:
+#
+#         def get_width(self):
+#              self.__width = width
+#
+# class Point:
+#     __slots__ = ['x','y']
+#
+#     def __init__(self, x, y):
+#         self.x = x
+#         self.y = y
+#
+#
+# p1 = Point(5, 10)
+# # p1.z = 20
+# print(p1.x,p1.y)
+#
+# # print(p1.__dict__)
+
+# class Point:
+#     def __init__(self, x, y):
+#         self.__x = x
+#         self.__y = y
+#
+#     def __get_coord_x(self, x):
+#         print("Вызов __setCoordX")
+#         self.__x = x
+#
+#     def __set_coord_x(self, x):
+#         print("Вызов __setCoordX")
+#         return self.__x
+#
+#     coord_x = property(__get_coord_x, __set_coord_x)
+#
+#
+# p1 = Point(5, 10)
+# p1.coord_x = 100
+# print(p1.coord_x)
+
+# class Point:
+#     __count = 0
+#
+#     def __init__(self, x=0, y=0):
+#         self.x = x
+#         self.y = y
+#         Point.__count += 1
+#     @staticmethod
+#     def get_count
+#         return Point.__count
+#
+#     def get_count():
+#         return  Point.__count
+#
+#
+# p1 = Point()
+# p2 = Point()
+# p3 = Point()
+# print(Point.get_count(p1))
+# def inc(x):
+#     return x + 1
+#
+#
+# def dec(x):
+#     return x - 1
+#
+#
+# print(inc(10), dec(10))
+#
+#
+# class Change:
+#     @staticmethod
+#     def inc(x):
+#         return x + 1
+#
+#     @staticmethod
+#     def dec(x):
+#         return x - 1
+#
+#
+# print(Change.inc(10),Change.dec(10))
+#
+# print()
\ No newline at end of file
Index: dz2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>file = \"text2.txt\"\r\nf = open(file, \"w\")\r\nf.write(\"Тест:\\n\"\r\n        \"Замена строки в текстовом файле\\n\"\r\n        \"изменить строку в списке\\n\"\r\n        \"записать список в файл\\n\")\r\nf.close()\r\nf = open(file)\r\ndata = f.readlines()\r\nprint(data)\r\nf.close()\r\n\r\ndata[0]=\"Pos1 = 1\\nPos2 = 2\\n\"\r\ndata[1] = \"записать список в файл\\n\"\r\ndata[2] = \"изменить строку в списке\\n\"\r\nprint(data)\r\n\r\nf = open(file, \"a\")\r\nf.writelines(data)\r\nf.close()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dz2.py b/dz2.py
--- a/dz2.py	(revision 413633cabfaf2ace3be119f48ae421a35d7fde21)
+++ b/dz2.py	(date 1743832678632)
@@ -1,20 +1,17 @@
-file = "text2.txt"
-f = open(file, "w")
-f.write("Тест:\n"
-        "Замена строки в текстовом файле\n"
-        "изменить строку в списке\n"
-        "записать список в файл\n")
-f.close()
-f = open(file)
-data = f.readlines()
-print(data)
-f.close()
+import os
+
 
-data[0]="Pos1 = 1\nPos2 = 2\n"
-data[1] = "записать список в файл\n"
-data[2] = "изменить строку в списке\n"
-print(data)
+def info_files(root, folder):
+    for root, dirs, files in os.walk(root):
+        for file in files:
+            file_path = os.path.join(root, file)
+            print(file_path)
+            file_size = os.path.getsize(file_path)
+            if file_size == 0:
+                os.renames(file_path, os.path.join(folder, file))
+                print(f"Файл {file} перемещен из папки {root} в папку {folder}")
+            else:
+                print(f"{file_path} - {file_size} bytes")
 
-f = open(file, "a")
-f.writelines(data)
-f.close()
\ No newline at end of file
+
+info_files("Work", "Work/empty_files")
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4f416ef5-eb15-4898-aec2-d1bbad773540\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/main3.py\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2tAt39KUFmSmEJ7igrmFqRJFHRZ\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.dz1.executor\": \"Run\",\r\n    \"Python.dz2.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"Python.main3.executor\": \"Run\",\r\n    \"Python.main4.executor\": \"Run\",\r\n    \"Python.main6.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"last_opened_file_path\": \"D:/python/main.py\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Python.main6\">\r\n    <configuration name=\"dz1\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/dz1.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"dz2\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/dz2.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main3\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main3.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main4\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main4.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main6\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"python\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main6.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main6\" />\r\n        <item itemvalue=\"Python.dz2\" />\r\n        <item itemvalue=\"Python.dz1\" />\r\n        <item itemvalue=\"Python.main4\" />\r\n        <item itemvalue=\"Python.main3\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-fc1d50d2d915-aa17d162503b-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-243.24978.54\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4f416ef5-eb15-4898-aec2-d1bbad773540\" name=\"Changes\" comment=\"\" />\r\n      <created>1739806504311</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1739806504311</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 413633cabfaf2ace3be119f48ae421a35d7fde21)
+++ b/.idea/workspace.xml	(date 1743832700402)
@@ -5,7 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="4f416ef5-eb15-4898-aec2-d1bbad773540" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/dz2.py" beforeDir="false" afterPath="$PROJECT_DIR$/dz2.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main6.py" beforeDir="false" afterPath="$PROJECT_DIR$/main6.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -26,22 +28,22 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.dz1.executor": "Run",
-    "Python.dz2.executor": "Run",
-    "Python.main.executor": "Run",
-    "Python.main3.executor": "Run",
-    "Python.main4.executor": "Run",
-    "Python.main6.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "master",
-    "last_opened_file_path": "D:/python/main.py"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.dz1.executor&quot;: &quot;Run&quot;,
+    &quot;Python.dz2.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main3.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main4.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main6.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;last_opened_file_path&quot;: &quot;D:/python/main.py&quot;
   }
-}]]></component>
-  <component name="RunManager" selected="Python.main6">
+}</component>
+  <component name="RunManager" selected="Python.dz2">
     <configuration name="dz1" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="python" />
       <option name="ENV_FILES" value="" />
@@ -154,8 +156,8 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.dz2" />
         <item itemvalue="Python.main6" />
-        <item itemvalue="Python.dz2" />
         <item itemvalue="Python.dz1" />
         <item itemvalue="Python.main4" />
         <item itemvalue="Python.main3" />
